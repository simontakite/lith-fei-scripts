<?xml version="1.0"?>
<pyxml>
<file name="/home/fdrake/projects/xml-python/xml/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/_checkversion.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/FtCore.py">
 <class name='class FtException(Exception)'>
  <method name="def __init__(self, errorCode, messages, args)"/>
  <method name="def __str__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/ns.py">
 <class name='class XMLNS'>
 </class>
 <class name='class SOAP'>
 </class>
 <class name='class DSIG'>
 </class>
 <class name='class ENCRYPTION'>
 </class>
 <class name='class SCHEMA'>
 </class>
 <class name='class XSLT'>
 </class>
 <class name='class XPATH'>
 </class>
 <class name='class WSDL'>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Attr.py">
 <class name='class Attr(FtNode)'>
  <method name="def __init__(self, ownerDocument, name, namespaceURI, prefix, localName)"/>
  <method name="def _get_name(self)"/>
  <method name="def _get_specified(self)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self, value)"/>
  <method name="def _get_ownerElement(self)"/>
  <method name="def _get_nodeValue(self)"/>
  <method name="def _set_nodeValue(self, value)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, children)"/>
  <method name="def _4dom_setOwnerElement(self, owner)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/CDATASection.py">
 <class name='class CDATASection(Text)'>
  <method name="def __init__(self, ownerDocument, data)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Comment.py">
 <class name='class Comment(CharacterData)'>
  <method name="def __init__(self,ownerDocument,data)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/DOMImplementation.py">
 <class name='class DOMImplementation'>
  <method name="def __init__(self)"/>
  <method name="def hasFeature(self, feature, version='')"/>
  <method name="def createDocumentType(self, qualifiedName, publicId, systemId)"/>
  <method name="def createDocument(self, namespaceURI, qualifiedName, doctype)"/>
  <method name="def _4dom_createNodeList(self, list=None)"/>
  <method name="def _4dom_createNamedNodeMap(self, owner=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/CharacterData.py">
 <class name='class CharacterData(FtNode)'>
  <method name="def __init__(self, ownerDocument, data)"/>
  <method name="def _get_data(self)"/>
  <method name="def _set_data(self, data)"/>
  <method name="def _get_length(self)"/>
  <method name="def appendData(self, arg)"/>
  <method name="def deleteData(self, offset, count)"/>
  <method name="def insertData(self, offset, arg)"/>
  <method name="def replaceData(self, offset, count, arg)"/>
  <method name="def substringData(self, offset, count)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Document.py">
 <class name='class Document(FtNode)'>
  <method name="def __init__(self, doctype)"/>
  <method name="def _get_doctype(self)"/>
  <method name="def _get_implementation(self)"/>
  <method name="def _get_documentElement(self)"/>
  <method name="def _get_ownerDocument(self)"/>
  <method name="def createAttribute(self, name)"/>
  <method name="def createCDATASection(self, data)"/>
  <method name="def createComment(self, data)"/>
  <method name="def createDocumentFragment(self)"/>
  <method name="def createElement(self, tagname)"/>
  <method name="def createEntityReference(self, name)"/>
  <method name="def createProcessingInstruction(self, target, data)"/>
  <method name="def createTextNode(self, data)"/>
  <method name="def getElementById(self, elementId)"/>
  <method name="def getElementsByTagName(self, tagName)"/>
  <method name="def createAttributeNS(self, namespaceURI, qualifiedName)"/>
  <method name="def importNode(self, importedNode, deep)"/>
  <method name="def createElementNS(self, namespaceURI, qualifiedName)"/>
  <method name="def getElementsByTagNameNS(self,namespaceURI,localName)"/>
  <method name="def createNodeIterator(self, root, whatToShow, filter, entityReferenceExpansion)"/>
  <method name="def createTreeWalker(self, root, whatToShow, filter, entityReferenceExpansion)"/>
  <method name="def createEvent(self,eventType)"/>
  <method name="def createRange(self)"/>
  <method name="def appendChild(self, newChild)"/>
  <method name="def insertBefore(self, newChild, oldChild)"/>
  <method name="def replaceChild(self, newChild, oldChild)"/>
  <method name="def removeChild(self,oldChild)"/>
  <method name="def cloneNode(self, deep)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_createEntity(self, publicId, systemId, notationName)"/>
  <method name="def _4dom_createNotation(self, publicId, systemId, name)"/>
  <method name="def _4dom_setDocumentType(self, doctype)"/>
  <method name="def _4dom_addSingle(self, node)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, (children, doctype, root))"/>
  <method name="def isXml(self)"/>
  <method name="def isHtml(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/DocumentType.py">
 <class name='class DocumentType(FtNode)'>
  <method name="def __init__(self, name, entities, notations, publicId, systemId)"/>
  <method name="def _get_name(self)"/>
  <method name="def _get_entities(self)"/>
  <method name="def _get_notations(self)"/>
  <method name="def _get_publicId(self)"/>
  <method name="def _get_systemId(self)"/>
  <method name="def _get_internalSubset(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_setOwnerDocument(self, newOwner)"/>
  <method name="def _4dom_setName(self, name)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/DocumentFragment.py">
 <class name='class DocumentFragment(FtNode)'>
  <method name="def __init__(self, ownerDocument)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/EntityReference.py">
 <class name='class EntityReference(FtNode)'>
  <method name="def __init__(self, ownerDocument, name)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Event.py">
 <class name='class EventException'>
  <method name="def __init__(self, code)"/>
 </class>
 <class name='class EventTarget'>
  <method name="def __init__(self)"/>
  <method name="def addEventListener(self, etype, listener, useCapture)"/>
  <method name="def removeEventListener(self, etype, listener, useCapture)"/>
  <method name="def dispatchEvent(self, evt)"/>
 </class>
 <class name='class EventListener'>
  <method name="def __init__(self)"/>
  <method name="def handleEvent(evt)"/>
 </class>
 <class name='class Event'>
  <method name="def __init__(self, eventType)"/>
  <method name="def stopPropagation(self)"/>
  <method name="def preventDefault(self)"/>
  <method name="def initEvent(self, eventTypeArg, canBubbleArg, cancelableArg)"/>
 </class>
 <class name='class MutationEvent(Event)'>
  <method name="def __init__(self, eventType)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/NamedNodeMap.py">
 <class name='class _NamedNodeMapIter'>
  <method name="def __init__(self,map)"/>
  <method name="def next(self)"/>
 </class>
 <class name='class NamedNodeMap(UserDict.UserDict)'>
  <method name="def __init__(self, ownerDoc=None)"/>
  <method name="def __getattr__(self, name)"/>
  <method name="def __setattr__(self, name, value)"/>
  <method name="def _get_length(self)"/>
  <method name="def item(self, index)"/>
  <method name="def getNamedItem(self, name)"/>
  <method name="def removeNamedItem(self, name)"/>
  <method name="def setNamedItem(self, arg)"/>
  <method name="def getNamedItemNS(self, namespaceURI, localName)"/>
  <method name="def setNamedItemNS(self, arg)"/>
  <method name="def removeNamedItemNS(self, namespaceURI, localName)"/>
  <method name="def __getitem__(self, index)"/>
  <method name="def __setitem__(self, index, item)"/>
  <method name="def __iter__(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_setOwnerDocument(self, newOwner)"/>
  <method name="def _4dom_clone(self, owner)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Element.py">
 <class name='class Element(FtNode)'>
  <method name="def __init__(self, ownerDocument, nodeName, namespaceURI, prefix, localName)"/>
  <method name="def _get_tagName(self)"/>
  <method name="def getAttribute(self, name)"/>
  <method name="def getAttributeNode(self, name)"/>
  <method name="def getElementsByTagName(self, tagName)"/>
  <method name="def hasAttribute(self, name)"/>
  <method name="def removeAttribute(self, name)"/>
  <method name="def removeAttributeNode(self, node)"/>
  <method name="def setAttribute(self, name, value)"/>
  <method name="def setAttributeNode(self, node)"/>
  <method name="def getAttributeNS(self, namespaceURI, localName)"/>
  <method name="def getAttributeNodeNS(self, namespaceURI, localName)"/>
  <method name="def getElementsByTagNameNS(self, namespaceURI, localName)"/>
  <method name="def hasAttributeNS(self, namespaceURI, localName)"/>
  <method name="def removeAttributeNS(self, namespaceURI, localName)"/>
  <method name="def setAttributeNS(self, namespaceURI, qualifiedName, value)"/>
  <method name="def setAttributeNodeNS(self, node)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_setOwnerDocument(self, newOwner)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, (children, attrs))"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Entity.py">
 <class name='class Entity(FtNode)'>
  <method name="def __init__(self, ownerDocument, publicId, systemId, notationName)"/>
  <method name="def _get_systemId(self)"/>
  <method name="def _get_publicId(self)"/>
  <method name="def _get_notationName(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/FtNode.py">
 <class name='class FtNode(Event.EventTarget, Node)'>
  <method name="def __getattr__(self, name)"/>
  <method name="def __setattr__(self, name, value)"/>
  <method name="def _get_nodeName(self)"/>
  <method name="def _get_nodeValue(self)"/>
  <method name="def _set_nodeValue(self,value)"/>
  <method name="def _get_nodeType(self)"/>
  <method name="def _get_parentNode(self)"/>
  <method name="def _get_childNodes(self)"/>
  <method name="def _get_firstChild(self)"/>
  <method name="def _get_lastChild(self)"/>
  <method name="def _get_previousSibling(self)"/>
  <method name="def _get_nextSibling(self)"/>
  <method name="def _get_ownerDocument(self)"/>
  <method name="def _get_attributes(self)"/>
  <method name="def _get_namespaceURI(self)"/>
  <method name="def _get_prefix(self)"/>
  <method name="def _set_prefix(self, value)"/>
  <method name="def _get_localName(self)"/>
  <method name="def insertBefore(self, newChild, refChild)"/>
  <method name="def replaceChild(self, newChild, oldChild)"/>
  <method name="def removeChild(self, childNode)"/>
  <method name="def appendChild(self, newChild)"/>
  <method name="def hasChildNodes(self)"/>
  <method name="def cloneNode(self, deep, newOwner=None, readOnly=0)"/>
  <method name="def normalize(self)"/>
  <method name="def supports(self, feature, version)"/>
  <method name="def dispatchEvent(self, evt)"/>
  <method name="def isSameNode(self, other)"/>
  <method name="def _4dom_setattr(self, name, value)"/>
  <method name="def _4dom_validateNode(self, newNode)"/>
  <method name="def _4dom_setHierarchy(self, parent, previous, next)"/>
  <method name="def _4dom_setParentNode(self, parent)"/>
  <method name="def _4dom_setNextSibling(self,next)"/>
  <method name="def _4dom_setPreviousSibling(self,prev)"/>
  <method name="def _4dom_setOwnerDocument(self, owner)"/>
  <method name="def _4dom_setReadOnly(self, flag)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, children)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/NodeFilter.py">
 <class name='class NodeFilter'>
  <method name="def acceptNode(self, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ProcessingInstruction.py">
 <class name='class ProcessingInstruction(FtNode)'>
  <method name="def __init__(self,ownerDocument,target,data)"/>
  <method name="def _get_target(self)"/>
  <method name="def _get_data(self)"/>
  <method name="def _set_data(self, newData)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Text.py">
 <class name='class Text(CharacterData)'>
  <method name="def __init__(self, ownerDocument, data)"/>
  <method name="def splitText(self, offset)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/TreeWalker.py">
 <class name='class TreeWalker'>
  <method name="def __init__(self, root, whatToShow, filter, expandEntityReferences)"/>
  <method name="def __getattr__(self, name)"/>
  <method name="def __setattr__(self, name, value)"/>
  <method name="def _get_root(self)"/>
  <method name="def _get_filter(self)"/>
  <method name="def _get_whatToShow(self)"/>
  <method name="def _get_expandEntityReferences(self)"/>
  <method name="def _get_currentNode(self)"/>
  <method name="def _set_currentNode(self, value)"/>
  <method name="def parentNode(self)"/>
  <method name="def firstChild(self)"/>
  <method name="def lastChild(self)"/>
  <method name="def previousSibling(self)"/>
  <method name="def nextSibling(self)"/>
  <method name="def nextNode(self)"/>
  <method name="def previousNode(self)"/>
  <method name="def __advance(self)"/>
  <method name="def __regress(self)"/>
  <method name="def __checkWhatToShow(self, node)"/>
  <method name="def __checkFilter(self, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/__init__.py">
 <class name='class Node'>
 </class>
 <class name='class DOMException(Exception)'>
  <method name="def __init__(self, code, msg='')"/>
  <method name="def __str__(self)"/>
 </class>
 <class name='class EventException(Exception)'>
  <method name="def __init__(self, code, msg='')"/>
  <method name="def __str__(self)"/>
 </class>
 <class name='class RangeException(Exception)'>
  <method name="def __init__(self, code, msg)"/>
 </class>
 <class name='class FtException(Exception)'>
  <method name="def __init__(self, code, *args)"/>
  <method name="def __str__(self)"/>
 </class>
 <class name='class IndexSizeErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class DOMStringSizeErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class HierarchyRequestErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class WrongDocumentErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class InvalidCharacterErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class NoDataAllowedErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class NoModificationAllowedErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class NotFoundErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class NotSupportedErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class InuseAttributeErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class InvalidStateErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class SyntaxErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class InvalidModificationErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class NamespaceErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class InvalidAccessErr(DOMException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class UnspecifiedEventTypeErr(EventException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class XmlParseErr(FtException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class BadBoundaryPointsErr(RangeException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
 <class name='class InvalidNodeTypeErr(RangeException)'>
  <method name="def __init__(self, msg='')"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/javadom.py">
 <class name='class BaseDomImplementation'>
  <method name="def buildDocumentString(self, string)"/>
  <method name="def buildDocumentUrl(self, url)"/>
  <method name="def buildDocumentFile(self, filename)"/>
 </class>
 <class name='class SunDomImplementation'>
  <method name="def createDocument(self)"/>
  <method name="def buildDocumentString(self, string)"/>
  <method name="def buildDocumentUrl(self, url)"/>
  <method name="def buildDocumentFile(self, filename)"/>
 </class>
 <class name='class XercesDomImplementation(BaseDomImplementation)'>
  <method name="def createDocument(self)"/>
  <method name="def _parse_from_source(self, source)"/>
 </class>
 <class name='class BrownellDomImplementation(BaseDomImplementation)'>
  <method name="def createDocument(self)"/>
  <method name="def _parse_from_source(self, source)"/>
 </class>
 <class name='class IndelvDomImplementation(BaseDomImplementation)'>
  <method name="def createDocument(self)"/>
  <method name="def _parse_from_source(self, source)"/>
 </class>
 <class name='class SxpDomImplementation(BaseDomImplementation)'>
  <method name="def createDocument(self)"/>
  <method name="def _parse_from_source(self, source)"/>
 </class>
 <class name='class OpenXmlDomImplementation(BaseDomImplementation)'>
  <method name="def createDocument(self)"/>
  <method name="def _parse_from_source(self, source)"/>
  <method name="def filetourl(file)"/>
  <method name="def _wrap_node(node)"/>
 </class>
 <class name='class DOMImplementation'>
  <method name="def __init__(self, impl)"/>
  <method name="def hasFeature(self, feature, version)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class Node'>
  <method name="def __init__(self, impl)"/>
  <method name="def _get_nodeName(self)"/>
  <method name="def _get_nodeValue(self)"/>
  <method name="def _get_nodeType(self)"/>
  <method name="def _get_parentNode(self)"/>
  <method name="def _get_childNodes(self)"/>
  <method name="def _get_firstChild(self)"/>
  <method name="def _get_lastChild(self)"/>
  <method name="def _get_previousSibling(self)"/>
  <method name="def _get_nextSibling(self)"/>
  <method name="def _get_ownerDocument(self)"/>
  <method name="def _get_attributes(self)"/>
  <method name="def insertBefore(self, new, neighbour)"/>
  <method name="def replaceChild(self, new, old)"/>
  <method name="def removeChild(self, old)"/>
  <method name="def appendChild(self, new)"/>
  <method name="def hasChildNodes(self)"/>
  <method name="def cloneNode(self)"/>
  <method name="def __getattr__(self, name)"/>
  <method name="def __setattr__(self, name, value)"/>
 </class>
 <class name='class Document(Node)'>
  <method name="def __init__(self, impl)"/>
  <method name="def createTextNode(self, data)"/>
  <method name="def createEntityReference(self, name)"/>
  <method name="def createElement(self, name)"/>
  <method name="def createDocumentFragment(self)"/>
  <method name="def createComment(self, data)"/>
  <method name="def createCDATASection(self, data)"/>
  <method name="def createProcessingInstruction(self, target, data)"/>
  <method name="def createAttribute(self, name)"/>
  <method name="def getElementsByTagName(self, name)"/>
  <method name="def _get_doctype(self)"/>
  <method name="def _get_implementation(self)"/>
  <method name="def _get_documentElement(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class Element(Node)'>
  <method name="def __init__(self, impl)"/>
  <method name="def getAttributeNode(self, name)"/>
  <method name="def setAttributeNode(self, attr)"/>
  <method name="def removeAttributeNode(self, attr)"/>
  <method name="def getElementsByTagName(self, name)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class CharacterData(Node)'>
  <method name="def __init__(self, impl)"/>
 </class>
 <class name='class Comment(CharacterData)'>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ProcessingInstruction(Node)'>
  <method name="def __init__(self, impl)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class Text(CharacterData)'>
  <method name="def splitText(self, offset)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class CDATASection(Text)'>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class Attr(Node)'>
  <method name="def __init__(self, impl)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class EntityReference(Node)'>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class DocumentType(Node)'>
  <method name="def __init__(self, impl)"/>
  <method name="def _get_entities(self)"/>
  <method name="def _get_notations(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class Notation(Node)'>
  <method name="def __init__(self, impl)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class Entity(Node)'>
  <method name="def __init__(self, impl)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class DocumentFragment(Node)'>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class NodeList'>
  <method name="def __init__(self, impl)"/>
  <method name="def __getitem__(self, ix)"/>
  <method name="def __setitem__(self, ix, item)"/>
  <method name="def __delitem__(self, ix, item)"/>
  <method name="def __setslice__(self, i, j, list)"/>
  <method name="def __delslice__(self, i, j)"/>
  <method name="def append(self, item)"/>
  <method name="def insert(self, i, item)"/>
  <method name="def pop(self, i=-1)"/>
  <method name="def remove(self, item)"/>
  <method name="def reverse(self)"/>
  <method name="def sort(self, *args)"/>
  <method name="def __add__(self, *args)"/>
  <method name="def __radd__(self, *args)"/>
  <method name="def __mul__(self, *args)"/>
  <method name="def __rmul__(self, *args)"/>
  <method name="def count(self, *args)"/>
  <method name="def count(self, *args)"/>
  <method name="def __getslice__(self, i, j)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class NamedNodeMap'>
  <method name="def __init__(self, impl)"/>
  <method name="def getNamedItem(self, name)"/>
  <method name="def setNamedItem(self, node)"/>
  <method name="def removeNamedItem(self, name)"/>
  <method name="def item(self, index)"/>
  <method name="def __getitem__(self, key)"/>
  <method name="def get(self, key, alternative = None)"/>
  <method name="def has_key(self, key)"/>
  <method name="def items(self)"/>
  <method name="def keys(self)"/>
  <method name="def values(self)"/>
  <method name="def __setitem__(self, key, item)"/>
  <method name="def update(self, nnm)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Range.py">
 <class name='class Range'>
  <method name="def __init__(self,ownerDocument)"/>
  <method name="def __setattr__(self,name,value)"/>
  <method name="def __getattr__(self,name)"/>
  <method name="def cloneContents(self)"/>
  <method name="def cloneRange(self)"/>
  <method name="def collapse(self,toStart)"/>
  <method name="def compareBoundaryPoints(self,how,sourceRange)"/>
  <method name="def deleteContents(self)"/>
  <method name="def detach(self)"/>
  <method name="def extractContents(self)"/>
  <method name="def insertNode(self,newNode)"/>
  <method name="def selectNode(self,refNode)"/>
  <method name="def selectNodeContents(self,refNode)"/>
  <method name="def setEnd(self,parent,offset)"/>
  <method name="def setEndAfter(self,node)"/>
  <method name="def setEndBefore(self,node)"/>
  <method name="def setStart(self,parent,offset)"/>
  <method name="def setStartAfter(self,node)"/>
  <method name="def setStartBefore(self,node)"/>
  <method name="def surroundContents(self,newParent)"/>
  <method name="def toString(self)"/>
  <method name="def __validateBoundary(self,node,offset)"/>
  <method name="def __validateRefNode(self,node)"/>
  <method name="def __comparePositions(self,aContainer,aOffset,bContainer,bOffset)"/>
  <method name="def __checkDescendants(self,sib,b)"/>
  <method name="def __calculateCommonAncestor(self)"/>
  <method name="def __recurseToString(self,node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/minidom.py">
 <class name='class NodeList(list)'>
  <method name="def item(self, index)"/>
  <method name="def NodeList()"/>
 </class>
 <class name='class Node(xml.dom.Node)'>
  <method name="def __init__(self)"/>
  <method name="def __nonzero__(self)"/>
  <method name="def toxml(self)"/>
  <method name='def toprettyxml(self, indent="\t", newl="\n")'/>
  <method name="def hasChildNodes(self)"/>
  <method name="def _get_firstChild(self)"/>
  <method name="def _get_lastChild(self)"/>
  <method name="def __getattr__(self, key)"/>
  <method name="def insertBefore(self, newChild, refChild)"/>
  <method name="def appendChild(self, node)"/>
  <method name="def replaceChild(self, newChild, oldChild)"/>
  <method name="def removeChild(self, oldChild)"/>
  <method name="def normalize(self)"/>
  <method name="def cloneNode(self, deep)"/>
  <method name="def isSameNode(self, other)"/>
  <method name="def unlink(self)"/>
  <method name="def _write_data(writer, data)"/>
  <method name="def _getElementsByTagNameHelper(parent, name, rc)"/>
  <method name="def _getElementsByTagNameNSHelper(parent, nsURI, localName, rc)"/>
 </class>
 <class name='class DocumentFragment(Node)'>
 </class>
 <class name='class Attr(Node)'>
  <method name="def __init__(self, qName, namespaceURI=EMPTY_NAMESPACE, localName=None, prefix=None)"/>
  <method name="def __setattr__(self, name, value)"/>
  <method name="def cloneNode(self, deep)"/>
 </class>
 <class name='class NamedNodeMap'>
  <method name="def __init__(self, attrs, attrsNS, ownerElement)"/>
  <method name="def __getattr__(self, name)"/>
  <method name="def item(self, index)"/>
  <method name="def items(self)"/>
  <method name="def itemsNS(self)"/>
  <method name="def keys(self)"/>
  <method name="def keysNS(self)"/>
  <method name="def values(self)"/>
  <method name="def get(self, name, value = None)"/>
  <method name="def __len__(self)"/>
  <method name="def __cmp__(self, other)"/>
  <method name="def __getitem__(self, attname_or_tuple)"/>
  <method name="def __setitem__(self, attname, value)"/>
  <method name="def setNamedItem(self, node)"/>
  <method name="def setNamedItemNS(self, node)"/>
  <method name="def __delitem__(self, attname_or_tuple)"/>
 </class>
 <class name='class Element(Node)'>
  <method name="def cloneNode(self, deep)"/>
  <method name="def unlink(self)"/>
  <method name="def getAttribute(self, attname)"/>
  <method name="def getAttributeNS(self, namespaceURI, localName)"/>
  <method name="def setAttribute(self, attname, value)"/>
  <method name="def setAttributeNS(self, namespaceURI, qualifiedName, value)"/>
  <method name="def getAttributeNode(self, attrname)"/>
  <method name="def getAttributeNodeNS(self, namespaceURI, localName)"/>
  <method name="def setAttributeNode(self, attr)"/>
  <method name="def removeAttribute(self, name)"/>
  <method name="def removeAttributeNS(self, namespaceURI, localName)"/>
  <method name="def removeAttributeNode(self, node)"/>
  <method name="def hasAttribute(self, name)"/>
  <method name="def hasAttributeNS(self, namespaceURI, localName)"/>
  <method name="def getElementsByTagName(self, name)"/>
  <method name="def getElementsByTagNameNS(self, namespaceURI, localName)"/>
  <method name="def __repr__(self)"/>
  <method name='def writexml(self, writer, indent="", addindent="", newl="")'/>
  <method name="def _get_attributes(self)"/>
  <method name="def hasAttributes(self)"/>
 </class>
 <class name='class Comment(Node)'>
  <method name="def __init__(self, data)"/>
  <method name='def writexml(self, writer, indent="", addindent="", newl="")'/>
 </class>
 <class name='class ProcessingInstruction(Node)'>
  <method name="def __init__(self, target, data)"/>
  <method name='def writexml(self, writer, indent="", addindent="", newl="")'/>
 </class>
 <class name='class CharacterData(Node)'>
  <method name="def __init__(self, data)"/>
  <method name="def __repr__(self)"/>
  <method name="def substringData(self, offset, count)"/>
  <method name="def appendData(self, arg)"/>
  <method name="def insertData(self, offset, arg)"/>
  <method name="def deleteData(self, offset, count)"/>
  <method name="def replaceData(self, offset, count, arg)"/>
 </class>
 <class name='class Text(CharacterData)'>
  <method name="def splitText(self, offset)"/>
  <method name='def writexml(self, writer, indent="", addindent="", newl="")'/>
 </class>
 <class name='class CDATASection(Text)'>
  <method name='def writexml(self, writer, indent="", addindent="", newl="")'/>
  <method name="def _nssplit(qualifiedName)"/>
 </class>
 <class name='class DocumentType(Node)'>
  <method name="def __init__(self, qualifiedName)"/>
 </class>
 <class name='class DOMImplementation'>
  <method name="def hasFeature(self, feature, version)"/>
  <method name="def createDocument(self, namespaceURI, qualifiedName, doctype)"/>
  <method name="def createDocumentType(self, qualifiedName, publicId, systemId)"/>
  <method name="def _createDocument(self)"/>
 </class>
 <class name='class Document(Node)'>
  <method name="def appendChild(self, node)"/>
  <method name="def removeChild(self, oldChild)"/>
  <method name="def _get_documentElement(self)"/>
  <method name="def unlink(self)"/>
  <method name="def createDocumentFragment(self)"/>
  <method name="def createElement(self, tagName)"/>
  <method name="def createTextNode(self, data)"/>
  <method name="def createCDATASection(self, data)"/>
  <method name="def createComment(self, data)"/>
  <method name="def createProcessingInstruction(self, target, data)"/>
  <method name="def createAttribute(self, qName)"/>
  <method name="def createElementNS(self, namespaceURI, qualifiedName)"/>
  <method name="def createAttributeNS(self, namespaceURI, qualifiedName)"/>
  <method name="def getElementsByTagName(self, name)"/>
  <method name="def getElementsByTagNameNS(self, namespaceURI, localName)"/>
  <method name='def writexml(self, writer, indent="", addindent="", newl="")'/>
  <method name="def _get_StringIO()"/>
  <method name="def _doparse(func, args, kwargs)"/>
  <method name="def parse(*args, **kwargs)"/>
  <method name="def parseString(*args, **kwargs)"/>
  <method name="def getDOMImplementation()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/pulldom.py">
 <class name='class PullDOM(xml.sax.ContentHandler)'>
  <method name="def __init__(self, documentFactory=None)"/>
  <method name="def pop(self)"/>
  <method name="def setDocumentLocator(self, locator)"/>
  <method name="def startPrefixMapping(self, prefix, uri)"/>
  <method name="def endPrefixMapping(self, prefix)"/>
  <method name="def startElementNS(self, name, tagName , attrs)"/>
  <method name="def endElementNS(self, name, tagName)"/>
  <method name="def startElement(self, name, attrs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def comment(self, s)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def ignorableWhitespace(self, chars)"/>
  <method name="def characters(self, chars)"/>
  <method name="def startDocument(self)"/>
  <method name="def buildDocument(self, uri, tagname)"/>
  <method name="def endDocument(self)"/>
  <method name="def clear(self)"/>
 </class>
 <class name='class ErrorHandler'>
  <method name="def warning(self, exception)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
 </class>
 <class name='class DOMEventStream'>
  <method name="def __init__(self, stream, parser, bufsize)"/>
  <method name="def reset(self)"/>
  <method name="def __getitem__(self, pos)"/>
  <method name="def expandNode(self, node)"/>
  <method name="def getEvent(self)"/>
  <method name="def _slurp(self)"/>
  <method name="def _emit(self)"/>
  <method name="def clear(self)"/>
 </class>
 <class name='class SAX2DOM(PullDOM)'>
  <method name="def startElementNS(self, name, tagName , attrs)"/>
  <method name="def startElement(self, name, attrs)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def ignorableWhitespace(self, chars)"/>
  <method name="def characters(self, chars)"/>
  <method name="def parse(stream_or_string, parser=None, bufsize=None)"/>
  <method name="def parseString(string, parser=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/NodeList.py">
 <class name='class NodeList(UserList.UserList)'>
  <method name="def __init__(self, list=None)"/>
  <method name="def __getattr__(self, name)"/>
  <method name="def __setattr__(self, name, value)"/>
  <method name="def _get_length(self)"/>
  <method name="def item(self, index)"/>
  <method name="def contains(self, node)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/NodeIterator.py">
 <class name='class NodeIterator'>
  <method name="def __init__(self, root, whatToShow, filter, expandEntityReferences)"/>
  <method name="def __setattr__(self, name, value)"/>
  <method name="def _get_root(self)"/>
  <method name="def _get_filter(self)"/>
  <method name="def _get_expandEntityReferences(self)"/>
  <method name="def _get_whatToShow(self)"/>
  <method name="def nextNode(self)"/>
  <method name="def previousNode(self)"/>
  <method name="def detach(self)"/>
  <method name="def _advance(self)"/>
  <method name="def _regress(self)"/>
  <method name="def _checkWhatToShow(self, node)"/>
  <method name="def _checkFilter(self, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/Notation.py">
 <class name='class Notation(FtNode)'>
  <method name="def __init__(self, ownerDocument, publicId, systemId, name)"/>
  <method name="def _get_systemId(self)"/>
  <method name="def _get_publicId(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/MessageSource.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/domreg.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/minitraversal.py">
 <class name='class DOMImplementation(minidom.DOMImplementation)'>
  <method name="def hasFeature(self, feature, version)"/>
  <method name="def _createDocument(self)"/>
 </class>
 <class name='class Document(minidom.Document)'>
  <method name="def createNodeIterator(self, root, whatToShow, filter, entityReferenceExpansion)"/>
  <method name="def createTreeWalker(self, root, whatToShow, filter, entityReferenceExpansion)"/>
  <method name="def createRange(self)"/>
  <method name="def getDOMImplementation()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/Printer.py">
 <class name='class PrintVisitor(Visitor)'>
  <method name="def _write(self, text)"/>
  <method name="def _tryIndent(self)"/>
  <method name="def visit(self, node)"/>
  <method name="def visitNodeList(self, node, exclude=None)"/>
  <method name="def visitNamedNodeMap(self, node)"/>
  <method name="def visitAttr(self, node)"/>
  <method name="def visitProlog(self)"/>
  <method name="def visitDocument(self, node)"/>
  <method name="def visitDocumentFragment(self, node)"/>
  <method name="def visitElement(self, node)"/>
  <method name="def visitText(self, node)"/>
  <method name="def visitDocumentType(self, doctype)"/>
  <method name="def visitEntity(self, node)"/>
  <method name="def visitNotation(self, node)"/>
  <method name="def visitCDATASection(self, node)"/>
  <method name="def visitComment(self, node)"/>
  <method name="def visitEntityReference(self, node)"/>
  <method name="def visitProcessingInstruction(self, node)"/>
 </class>
 <class name='class PrintWalker(WalkerInterface)'>
  <method name="def __init__(self, visitor, startNode)"/>
  <method name="def step(self)"/>
  <method name="def run(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/Visitor.py">
 <class name='class Visitor'>
  <method name="def visit(self, node)"/>
 </class>
 <class name='class WalkerInterface'>
  <method name="def __init__(self, visitor)"/>
  <method name="def step(self)"/>
  <method name="def run(self)"/>
 </class>
 <class name='class PreOrderWalker(WalkerInterface)'>
  <method name="def __init__(self, visitor, startNode)"/>
  <method name="def step(self)"/>
  <method name="def run(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/XHtmlPrinter.py">
 <class name='class XHtmlDocType'>
  <method name="def __init__(self, doctype)"/>
 </class>
 <class name='class XHtmlAttr'>
  <method name="def __init__(self, node)"/>
  <method name="def __getattr__(self, key)"/>
 </class>
 <class name='class XHtmlElement'>
  <method name="def __init__(self, node)"/>
  <method name="def __getattr__(self, key)"/>
 </class>
 <class name='class XHtmlPrintVisitor(Printer.PrintVisitor)'>
  <method name="def __init__(self, stream, encoding, indent)"/>
  <method name="def visitDocument(self,node)"/>
  <method name="def visitAttr(self, node)"/>
  <method name="def visitElement(self, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/__init__.py">
 <class name='class FtDomException(DOMException)'>
  <method name="def __init__(self, *args)"/>
  <method name="def NodeTypeToClassName(nodeType)"/>
  <method name="def Print(root, stream=sys.stdout, encoding='UTF-8')"/>
  <method name="def XHtmlPrettyPrint(root, stream=sys.stdout, encoding='UTF-8', indent='  ')"/>
  <method name="def XHtmlPrint(root, stream=sys.stdout, encoding='UTF-8')"/>
  <method name="def ReleaseNode(node)"/>
  <method name="def StripHtml(startNode, preserveElements=None)"/>
  <method name="def StripXml(startNode, preserveElements=None)"/>
  <method name="def GetElementById(startNode, targetId)"/>
  <method name="def XmlSpaceState(node)"/>
  <method name="def GetAllNs(node)"/>
  <method name="def SplitQName(qname)"/>
  <method name="def SeekNss(node, nss=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/XHtml2HtmlPrinter.py">
 <class name='class HtmlDocType'>
 </class>
 <class name='class HtmlAttr'>
  <method name="def __init__(self, node)"/>
 </class>
 <class name='class HtmlElement'>
  <method name="def __init__(self, node)"/>
 </class>
 <class name='class XHtml2HtmlPrintVisitor(Printer.PrintVisitor)'>
  <method name="def __init__(self, stream, encoding, indent='', plainElements=None)"/>
  <method name="def visitDocument(self, doc)"/>
  <method name="def visitAttr(self, node)"/>
  <method name="def visitElement(self, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/c14n.py">
 <class name='class XMLNS'>
  <method name="def _sorter(n1,n2)"/>
  <method name="def _sorter_ns(n1,n2)"/>
  <method name="def _utilized(n, node, other_attrs, unsuppressedPrefixes)"/>
 </class>
 <class name='class _implementation'>
  <method name="def __init__(self, node, write, **kw)"/>
  <method name="def _inherit_context(self, node)"/>
  <method name="def _do_document(self, node)"/>
  <method name="def _do_text(self, node)"/>
  <method name="def _do_pi(self, node)"/>
  <method name="def _do_comment(self, node)"/>
  <method name="def _do_attr(self, n, value)"/>
  <method name="def _do_element(self, node, initial_other_attrs = [])"/>
  <method name="def Canonicalize(node, output=None, **kw)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/HtmlLib.py">
 <class name='class Reader(reader.Reader)'>
  <method name="def __init__(self)"/>
  <method name="def fromStream(self, stream, ownerDoc=None, charset='')"/>
  <method name="def fromUri(self, uri, ownerDoc=None, charset='')"/>
  <method name="def fromString(self, str, ownerDoc=None, charset='')"/>
  <method name="def FromHtmlStream(fp, ownerDoc=None, charset='')"/>
  <method name="def FromHtmlFile(fileName, ownerDoc=None, charset='')"/>
  <method name="def FromHtmlUrl(url, ownerDoc=None, charset='')"/>
  <method name="def FromHtml(text, ownerDoc=None, charset='')"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/HtmlSax.py">
 <class name='class HtmlDomGenerator'>
  <method name="def __init__(self, keepAllWs=0)"/>
  <method name="def initState(self, ownerDoc=None)"/>
  <method name="def getRootNode(self)"/>
  <method name="def _completeTextNode(self)"/>
  <method name="def startElement(self, name, attribs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def ignorableWhitespace(self, ch, start, length)"/>
  <method name="def characters(self, ch, start, length)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/PyExpat.py">
 <class name='class Reader(reader.Reader)'>
  <method name="def __init__(self)"/>
  <method name="def initState(self, ownerDoc=None)"/>
  <method name="def initParser(self)"/>
  <method name="def fromStream(self, stream, ownerDoc=None)"/>
  <method name="def _initRootNode(self, docElementUri, docElementName)"/>
  <method name="def _completeTextNode(self)"/>
  <method name="def processingInstruction (self, target, data)"/>
  <method name="def startElement(self, name, attribs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def characters(self, data)"/>
  <method name="def startDTD(self, doctype, publicID, systemID)"/>
  <method name="def comment(self, text)"/>
  <method name="def startCDATA(self)"/>
  <method name="def endCDATA(self)"/>
  <method name="def notationDecl(self, name, base, publicId, systemId)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/Sax.py">
 <class name='class XmlDomGenerator(saxlib.HandlerBase)'>
  <method name="def __init__(self, keepAllWs=0)"/>
  <method name="def initState(self, ownerDoc=None)"/>
  <method name="def getRootNode(self)"/>
  <method name="def _completeTextNode(self)"/>
  <method name="def notationDecl (self, name, publicId, systemId)"/>
  <method name="def unparsedEntityDecl (self, name, publicId, systemId, notationName)"/>
  <method name="def processingInstruction (self, target, data)"/>
  <method name="def startElement(self, name, attribs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def ignorableWhitespace(self, ch, start, length)"/>
  <method name="def characters(self, ch, start, length)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
 </class>
 <class name='class Reader(reader.Reader)'>
  <method name="def releaseNode(self, node)"/>
  <method name="def fromStream(self, stream, ownerDocument=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/Sax2.py">
 <class name='class NsHandler'>
  <method name="def initState(self, ownerDoc=None)"/>
  <method name="def startElement(self, name, attribs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def __init__(self, keepAllWs=0)"/>
  <method name="def initState(self, ownerDoc=None)"/>
  <method name="def _initRootNode(self, docElementUri, docElementName)"/>
  <method name="def _completeTextNode(self)"/>
  <method name="def getRootNode(self)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def startPrefixMapping(self,prefix,uri)"/>
  <method name="def endPrefixMapping(self,prefix)"/>
  <method name="def startElementNS(self, name, qname, attribs)"/>
  <method name="def endElementNS(self, name, qname)"/>
  <method name="def ignorableWhitespace(self, chars)"/>
  <method name="def characters(self, chars)"/>
  <method name="def xmlDecl(self, version, encoding, standalone)"/>
  <method name="def startDTD(self, doctype, publicID, systemID)"/>
  <method name="def comment(self, text)"/>
  <method name="def startCDATA(self)"/>
  <method name="def endCDATA(self)"/>
  <method name="def notationDecl (self, name, publicId, systemId)"/>
  <method name="def unparsedEntityDecl (self, name, publicId, systemId, ndata)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
 </class>
 <class name='class Reader(reader.Reader)'>
  <method name="def fromStream(self, stream, ownerDoc=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/__init__.py">
 <class name='class BaseUriResolver'>
  <method name="def resolve(self, uri, base='')"/>
 </class>
 <class name='class Reader'>
  <method name="def clone(self)"/>
  <method name="def fromStream(self, stream, ownerDoc=None)"/>
  <method name="def fromString(self, str, ownerDoc=None)"/>
  <method name="def fromUri(self, uri, ownerDoc=None)"/>
  <method name="def releaseNode(self, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/Sax2Lib.py">
 <class name='class LexicalHandler'>
  <method name="def xmlDecl(self, version, encoding, standalone)"/>
  <method name="def startDTD(self, doctype, publicID, systemID)"/>
  <method name="def endDTD(self)"/>
  <method name="def startEntity(self, name)"/>
  <method name="def endEntity(self, name)"/>
  <method name="def comment(self, text)"/>
  <method name="def startCDATA(self)"/>
  <method name="def endCDATA(self)"/>
 </class>
 <class name='class  AttributeList2(saxlib. AttributeList)'>
  <method name="def isSpecified(self, id)"/>
  <method name="def getEntityRefList(self, id)"/>
 </class>
 <class name='class EntityRefList'>
  <method name="def getLength(self)"/>
  <method name="def getEntityName(self, index)"/>
  <method name="def getEntityRefStart(self, index)"/>
  <method name="def getEntityRefEnd(self, index)"/>
  <method name="def __len__(self)"/>
 </class>
 <class name='class DTDDeclHandler'>
  <method name="def elementDecl(self, name, modelType, model)"/>
  <method name="def externalEntityDecl(self, name, isParameterEntity, publicId, systemId)"/>
  <method name="def internalEntityDecl(self, name, isParameterEntity, value)"/>
 </class>
 <class name='class NamespaceHandler'>
  <method name="def startNamespaceDeclScope(self, prefix, uri)"/>
  <method name="def endNamespaceDeclScope(self, prefix)"/>
 </class>
 <class name='class ModParser(saxlib.Parser)'>
  <method name="def setFeature(self, featureID, state)"/>
  <method name="def setHandler(self, handlerID, handler)"/>
  <method name="def set(self, propID, value)"/>
  <method name="def get(self, propID)"/>
 </class>
 <class name='class SAXNotSupportedException(Exception)'>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/Sgmlop.py">
 <class name='class SgmlopParser'>
  <method name="def __init__(self, entities=None)"/>
  <method name="def initParser(self, parser)"/>
  <method name="def initState(self, ownerDoc=None)"/>
  <method name="def parse(self, stream)"/>
  <method name="def handle_special(self, data)"/>
  <method name="def handle_proc(self, target, data)"/>
  <method name="def finish_starttag(self, tagname, attrs)"/>
  <method name="def finish_endtag(self, tagname)"/>
  <method name="def handle_entityref(self, name)"/>
  <method name="def handle_cdata(self, data)"/>
  <method name="def handle_data(self, data)"/>
  <method name="def handle_comment(self, data)"/>
 </class>
 <class name='class HtmlParser(SgmlopParser)'>
  <method name="def __init__(self)"/>
  <method name="def initParser(self)"/>
  <method name="def initState(self, ownerDoc=None, charset='')"/>
  <method name="def handle_special(self, data)"/>
  <method name="def handle_proc(self, target, data)"/>
  <method name="def finish_starttag(self, tagname, attrs)"/>
  <method name="def finish_endtag(self, tagname)"/>
  <method name="def handle_entityref(self, name)"/>
  <method name="def handle_data(self, data)"/>
  <method name="def handle_comment(self, data)"/>
 </class>
 <class name='class XmlParser(SgmlopParser)'>
  <method name="def initParser(self)"/>
  <method name="def initState(self, ownerDoc=None)"/>
  <method name="def finish_starttag(self, tagname, attrs)"/>
  <method name="def finish_endtag(self, tagname)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/ext/reader/test_suite/Benchmark.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLAnchorElement.py">
 <class name='class HTMLAnchorElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="A")'/>
  <method name="def _get_accessKey(self)"/>
  <method name="def _set_accessKey(self, value)"/>
  <method name="def _get_charset(self)"/>
  <method name="def _set_charset(self, value)"/>
  <method name="def _get_coords(self)"/>
  <method name="def _set_coords(self, value)"/>
  <method name="def _get_href(self)"/>
  <method name="def _set_href(self, value)"/>
  <method name="def _get_hreflang(self)"/>
  <method name="def _set_hreflang(self, value)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_rel(self)"/>
  <method name="def _set_rel(self, value)"/>
  <method name="def _get_rev(self)"/>
  <method name="def _set_rev(self, value)"/>
  <method name="def _get_shape(self)"/>
  <method name="def _set_shape(self, value)"/>
  <method name="def _get_tabIndex(self)"/>
  <method name="def _set_tabIndex(self, value)"/>
  <method name="def _get_target(self)"/>
  <method name="def _set_target(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
  <method name="def blur(self)"/>
  <method name="def focus(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLAppletElement.py">
 <class name='class HTMLAppletElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="APPLET")'/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
  <method name="def _get_alt(self)"/>
  <method name="def _set_alt(self, value)"/>
  <method name="def _get_archive(self)"/>
  <method name="def _set_archive(self, value)"/>
  <method name="def _get_code(self)"/>
  <method name="def _set_code(self, value)"/>
  <method name="def _get_codeBase(self)"/>
  <method name="def _set_codeBase(self, value)"/>
  <method name="def _get_height(self)"/>
  <method name="def _set_height(self, value)"/>
  <method name="def _get_hspace(self)"/>
  <method name="def _set_hspace(self, value)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_object(self)"/>
  <method name="def _set_object(self, value)"/>
  <method name="def _get_vspace(self)"/>
  <method name="def _set_vspace(self, value)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLAreaElement.py">
 <class name='class HTMLAreaElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="AREA")'/>
  <method name="def _get_accessKey(self)"/>
  <method name="def _set_accessKey(self, value)"/>
  <method name="def _get_alt(self)"/>
  <method name="def _set_alt(self, value)"/>
  <method name="def _get_coords(self)"/>
  <method name="def _set_coords(self, value)"/>
  <method name="def _get_href(self)"/>
  <method name="def _set_href(self, value)"/>
  <method name="def _get_noHref(self)"/>
  <method name="def _set_noHref(self, value)"/>
  <method name="def _get_shape(self)"/>
  <method name="def _set_shape(self, value)"/>
  <method name="def _get_tabIndex(self)"/>
  <method name="def _set_tabIndex(self, value)"/>
  <method name="def _get_target(self)"/>
  <method name="def _set_target(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLBRElement.py">
 <class name='class HTMLBRElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="BR")'/>
  <method name="def _get_clear(self)"/>
  <method name="def _set_clear(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLBaseElement.py">
 <class name='class HTMLBaseElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="BASE")'/>
  <method name="def _get_href(self)"/>
  <method name="def _set_href(self, value)"/>
  <method name="def _get_target(self)"/>
  <method name="def _set_target(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLBaseFontElement.py">
 <class name='class HTMLBaseFontElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="BASEFONT")'/>
  <method name="def _get_color(self)"/>
  <method name="def _set_color(self, value)"/>
  <method name="def _get_face(self)"/>
  <method name="def _set_face(self, value)"/>
  <method name="def _get_size(self)"/>
  <method name="def _set_size(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLBodyElement.py">
 <class name='class HTMLBodyElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="BODY")'/>
  <method name="def _get_aLink(self)"/>
  <method name="def _set_aLink(self, value)"/>
  <method name="def _get_background(self)"/>
  <method name="def _set_background(self, value)"/>
  <method name="def _get_bgColor(self)"/>
  <method name="def _set_bgColor(self, value)"/>
  <method name="def _get_link(self)"/>
  <method name="def _set_link(self, value)"/>
  <method name="def _get_text(self)"/>
  <method name="def _set_text(self, value)"/>
  <method name="def _get_vLink(self)"/>
  <method name="def _set_vLink(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLCollection.py">
 <class name='class HTMLCollection(UserList.UserList)'>
  <method name="def __init__(self, list=None)"/>
  <method name="def __getattr__(self, name)"/>
  <method name="def __setattr__(self, name, value)"/>
  <method name="def _get_length(self)"/>
  <method name="def _set_length(self, value)"/>
  <method name="def item(self, index)"/>
  <method name="def namedItem(self, name)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLButtonElement.py">
 <class name='class HTMLButtonElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="BUTTON")'/>
  <method name="def _get_accessKey(self)"/>
  <method name="def _set_accessKey(self, value)"/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self, value)"/>
  <method name="def _get_form(self)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_tabIndex(self)"/>
  <method name="def _set_tabIndex(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLDOMImplementation.py">
 <class name='class HTMLDOMImplementation(DOMImplementation.DOMImplementation)'>
  <method name="def __init__(self)"/>
  <method name="def createHTMLDocument(self, title)"/>
  <method name="def _4dom_createHTMLCollection(self,list=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLDListElement.py">
 <class name='class HTMLDListElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="DL")'/>
  <method name="def _get_compact(self)"/>
  <method name="def _set_compact(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLDirectoryElement.py">
 <class name='class HTMLDirectoryElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="DIR")'/>
  <method name="def _get_compact(self)"/>
  <method name="def _set_compact(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLDocument.py">
 <class name='class HTMLDocument(Document)'>
  <method name="def __init__(self)"/>
  <method name="def _get_URL(self)"/>
  <method name="def _get_anchors(self)"/>
  <method name="def _get_applets(self)"/>
  <method name="def _get_body(self)"/>
  <method name="def _set_body(self, newBody)"/>
  <method name="def _get_cookie(self)"/>
  <method name="def _set_cookie(self, cookie)"/>
  <method name="def _get_domain(self)"/>
  <method name="def _get_forms(self)"/>
  <method name="def _get_images(self)"/>
  <method name="def _get_links(self)"/>
  <method name="def _get_referrer(self)"/>
  <method name="def _get_title(self)"/>
  <method name="def _set_title(self, title)"/>
  <method name="def close(self)"/>
  <method name="def getElementsByName(self, elementName)"/>
  <method name="def open(self)"/>
  <method name="def write(self, st)"/>
  <method name="def writeln(self, st)"/>
  <method name="def getElementByID(self, ID)"/>
  <method name="def createElement(self, tagName)"/>
  <method name="def createAttribute(self, name)"/>
  <method name="def createCDATASection(*args, **kw)"/>
  <method name="def createEntityReference(*args, **kw)"/>
  <method name="def createProcessingInstruction(*args, **kw)"/>
  <method name="def _4dom_createEntity(*args, **kw)"/>
  <method name="def _4dom_createNotation(*args, **kw)"/>
  <method name="def _4dom_getElementsByAttribute(self, tagName, attribute, attrValue=None)"/>
  <method name="def _4dom_getHead(self)"/>
  <method name="def _4dom_createHTMLElement(self, tagName)"/>
  <method name="def cloneNode(self, deep)"/>
  <method name="def isXml(self)"/>
  <method name="def isHtml(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLElement.py">
 <class name='class HTMLElement(Element)'>
  <method name="def __init__(self, ownerDocument, nodeName)"/>
  <method name="def _get_id(self)"/>
  <method name="def _set_id(self,ID)"/>
  <method name="def _get_title(self)"/>
  <method name="def _set_title(self,title)"/>
  <method name="def _get_lang(self)"/>
  <method name="def _set_lang(self,lang)"/>
  <method name="def _get_dir(self)"/>
  <method name="def _set_dir(self,dir)"/>
  <method name="def _get_className(self)"/>
  <method name="def _set_className(self,className)"/>
  <method name="def getAttribute(self, name)"/>
  <method name="def getAttributeNode(self, name)"/>
  <method name="def getElementsByTagName(self, tagName)"/>
  <method name="def hasAttribute(self, name)"/>
  <method name="def removeAttribute(self, name)"/>
  <method name="def setAttribute(self, name, value)"/>
  <method name="def _4dom_validateString(self, value)"/>
  <method name="def _4dom_clone(self, owner)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLDivElement.py">
 <class name='class HTMLDivElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="DIV")'/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLFieldSetElement.py">
 <class name='class HTMLFieldSetElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="FIELDSET")'/>
  <method name="def _get_form(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLFontElement.py">
 <class name='class HTMLFontElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="FONT")'/>
  <method name="def _get_color(self)"/>
  <method name="def _set_color(self, value)"/>
  <method name="def _get_face(self)"/>
  <method name="def _set_face(self, value)"/>
  <method name="def _get_size(self)"/>
  <method name="def _set_size(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLFormElement.py">
 <class name='class HTMLFormElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='FORM')"/>
  <method name="def _get_acceptCharset(self)"/>
  <method name="def _set_acceptCharset(self,acceptcharset)"/>
  <method name="def _get_action(self)"/>
  <method name="def _set_action(self,action)"/>
  <method name="def _get_elements(self)"/>
  <method name="def _get_encType(self)"/>
  <method name="def _set_encType(self,enctype)"/>
  <method name="def _get_length(self)"/>
  <method name="def _get_method(self)"/>
  <method name="def _set_method(self,method)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self,name)"/>
  <method name="def _get_target(self)"/>
  <method name="def _set_target(self,target)"/>
  <method name="def reset(self)"/>
  <method name="def submit(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLFrameElement.py">
 <class name='class HTMLFrameElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="FRAME")'/>
  <method name="def _get_contentDocument(self)"/>
  <method name="def _get_frameBorder(self)"/>
  <method name="def _set_frameBorder(self, value)"/>
  <method name="def _get_longDesc(self)"/>
  <method name="def _set_longDesc(self, value)"/>
  <method name="def _get_marginHeight(self)"/>
  <method name="def _set_marginHeight(self, value)"/>
  <method name="def _get_marginWidth(self)"/>
  <method name="def _set_marginWidth(self, value)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_noResize(self)"/>
  <method name="def _set_noResize(self, value)"/>
  <method name="def _get_scrolling(self)"/>
  <method name="def _set_scrolling(self, value)"/>
  <method name="def _get_src(self)"/>
  <method name="def _set_src(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLFrameSetElement.py">
 <class name='class HTMLFrameSetElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="FRAMESET")'/>
  <method name="def _get_cols(self)"/>
  <method name="def _set_cols(self, value)"/>
  <method name="def _get_rows(self)"/>
  <method name="def _set_rows(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLHRElement.py">
 <class name='class HTMLHRElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="HR")'/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
  <method name="def _get_noShade(self)"/>
  <method name="def _set_noShade(self, value)"/>
  <method name="def _get_size(self)"/>
  <method name="def _set_size(self, value)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLHeadElement.py">
 <class name='class HTMLHeadElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="HEAD")'/>
  <method name="def _get_profile(self)"/>
  <method name="def _set_profile(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLHeadingElement.py">
 <class name='class HTMLHeadingElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName)"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLHtmlElement.py">
 <class name='class HTMLHtmlElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="HTML")'/>
  <method name="def _get_version(self)"/>
  <method name="def _set_version(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLIFrameElement.py">
 <class name='class HTMLIFrameElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="IFRAME")'/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
  <method name="def _get_contentDocument(self)"/>
  <method name="def _get_frameBorder(self)"/>
  <method name="def _set_frameBorder(self, value)"/>
  <method name="def _get_height(self)"/>
  <method name="def _set_height(self, value)"/>
  <method name="def _get_longDesc(self)"/>
  <method name="def _set_longDesc(self, value)"/>
  <method name="def _get_marginHeight(self)"/>
  <method name="def _set_marginHeight(self, value)"/>
  <method name="def _get_marginWidth(self)"/>
  <method name="def _set_marginWidth(self, value)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_scrolling(self)"/>
  <method name="def _set_scrolling(self, value)"/>
  <method name="def _get_src(self)"/>
  <method name="def _set_src(self, value)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLInputElement.py">
 <class name='class HTMLInputElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='INPUT')"/>
  <method name="def _get_accept(self)"/>
  <method name="def _set_accept(self,accept)"/>
  <method name="def _get_accessKey(self)"/>
  <method name="def _set_accessKey(self,accessKey)"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self,align)"/>
  <method name="def _get_alt(self)"/>
  <method name="def _set_alt(self,alt)"/>
  <method name="def _get_checked(self)"/>
  <method name="def _set_checked(self,checked)"/>
  <method name="def _get_defaultChecked(self)"/>
  <method name="def _set_defaultChecked(self,checked)"/>
  <method name="def _get_defaultValue(self)"/>
  <method name="def _set_defaultValue(self,value)"/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self,disabled)"/>
  <method name="def _get_form(self)"/>
  <method name="def _get_maxLength(self)"/>
  <method name="def _set_maxLength(self,maxLength)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self,name)"/>
  <method name="def _get_readOnly(self)"/>
  <method name="def _set_readOnly(self,readOnly)"/>
  <method name="def _get_size(self)"/>
  <method name="def _set_size(self,size)"/>
  <method name="def _get_src(self)"/>
  <method name="def _set_src(self,src)"/>
  <method name="def _get_tabIndex(self)"/>
  <method name="def _set_tabIndex(self,tabIndex)"/>
  <method name="def _get_type(self)"/>
  <method name="def _get_useMap(self)"/>
  <method name="def _set_useMap(self,useMap)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self,value)"/>
  <method name="def blur(self)"/>
  <method name="def click(self)"/>
  <method name="def focus(self)"/>
  <method name="def select(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLImageElement.py">
 <class name='class HTMLImageElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="IMG")'/>
  <method name="def _get_lowSrc(self)"/>
  <method name="def _set_lowSrc(self, value)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
  <method name="def _get_alt(self)"/>
  <method name="def _set_alt(self, value)"/>
  <method name="def _get_border(self)"/>
  <method name="def _set_border(self, value)"/>
  <method name="def _get_height(self)"/>
  <method name="def _set_height(self, value)"/>
  <method name="def _get_hspace(self)"/>
  <method name="def _set_hspace(self, value)"/>
  <method name="def _get_isMap(self)"/>
  <method name="def _set_isMap(self, value)"/>
  <method name="def _get_longDesc(self)"/>
  <method name="def _set_longDesc(self, value)"/>
  <method name="def _get_src(self)"/>
  <method name="def _set_src(self, value)"/>
  <method name="def _get_useMap(self)"/>
  <method name="def _set_useMap(self, value)"/>
  <method name="def _get_vspace(self)"/>
  <method name="def _set_vspace(self, value)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLIsIndexElement.py">
 <class name='class HTMLIsIndexElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="ISINDEX")'/>
  <method name="def _get_form(self)"/>
  <method name="def _get_prompt(self)"/>
  <method name="def _set_prompt(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLLIElement.py">
 <class name='class HTMLLIElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="LI")'/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLLabelElement.py">
 <class name='class HTMLLabelElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="LABEL")'/>
  <method name="def _get_accessKey(self)"/>
  <method name="def _set_accessKey(self, value)"/>
  <method name="def _get_form(self)"/>
  <method name="def _get_htmlFor(self)"/>
  <method name="def _set_htmlFor(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLLegendElement.py">
 <class name='class HTMLLegendElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="LEGEND")'/>
  <method name="def _get_accessKey(self)"/>
  <method name="def _set_accessKey(self, value)"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
  <method name="def _get_form(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLMapElement.py">
 <class name='class HTMLMapElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='MAP')"/>
  <method name="def _get_areas(self)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self,name)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLLinkElement.py">
 <class name='class HTMLLinkElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="LINK")'/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self, value)"/>
  <method name="def _get_charset(self)"/>
  <method name="def _set_charset(self, value)"/>
  <method name="def _get_href(self)"/>
  <method name="def _set_href(self, value)"/>
  <method name="def _get_hreflang(self)"/>
  <method name="def _set_hreflang(self, value)"/>
  <method name="def _get_media(self)"/>
  <method name="def _set_media(self, value)"/>
  <method name="def _get_rel(self)"/>
  <method name="def _set_rel(self, value)"/>
  <method name="def _get_rev(self)"/>
  <method name="def _set_rev(self, value)"/>
  <method name="def _get_target(self)"/>
  <method name="def _set_target(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLMenuElement.py">
 <class name='class HTMLMenuElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="MENU")'/>
  <method name="def _get_compact(self)"/>
  <method name="def _set_compact(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLMetaElement.py">
 <class name='class HTMLMetaElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="META")'/>
  <method name="def _get_content(self)"/>
  <method name="def _set_content(self, value)"/>
  <method name="def _get_httpEquiv(self)"/>
  <method name="def _set_httpEquiv(self, value)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_scheme(self)"/>
  <method name="def _set_scheme(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLModElement.py">
 <class name='class HTMLModElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="MOD")'/>
  <method name="def _get_cite(self)"/>
  <method name="def _set_cite(self, value)"/>
  <method name="def _get_dateTime(self)"/>
  <method name="def _set_dateTime(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLOListElement.py">
 <class name='class HTMLOListElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="OL")'/>
  <method name="def _get_compact(self)"/>
  <method name="def _set_compact(self, value)"/>
  <method name="def _get_start(self)"/>
  <method name="def _set_start(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLObjectElement.py">
 <class name='class HTMLObjectElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="OBJECT")'/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
  <method name="def _get_archive(self)"/>
  <method name="def _set_archive(self, value)"/>
  <method name="def _get_border(self)"/>
  <method name="def _set_border(self, value)"/>
  <method name="def _get_code(self)"/>
  <method name="def _set_code(self, value)"/>
  <method name="def _get_codeBase(self)"/>
  <method name="def _set_codeBase(self, value)"/>
  <method name="def _get_codeType(self)"/>
  <method name="def _set_codeType(self, value)"/>
  <method name="def _get_contentDocument(self)"/>
  <method name="def _get_data(self)"/>
  <method name="def _set_data(self, value)"/>
  <method name="def _get_declare(self)"/>
  <method name="def _set_declare(self, value)"/>
  <method name="def _get_form(self)"/>
  <method name="def _get_height(self)"/>
  <method name="def _set_height(self, value)"/>
  <method name="def _get_hspace(self)"/>
  <method name="def _set_hspace(self, value)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_standby(self)"/>
  <method name="def _set_standby(self, value)"/>
  <method name="def _get_tabIndex(self)"/>
  <method name="def _set_tabIndex(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
  <method name="def _get_useMap(self)"/>
  <method name="def _set_useMap(self, value)"/>
  <method name="def _get_vspace(self)"/>
  <method name="def _set_vspace(self, value)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLOptionElement.py">
 <class name='class HTMLOptionElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='OPTION')"/>
  <method name="def _get_defaultSelected(self)"/>
  <method name="def _set_defaultSelected(self, selected)"/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self,disabled)"/>
  <method name="def _get_form(self)"/>
  <method name="def _get_index(self)"/>
  <method name="def _get_label(self)"/>
  <method name="def _set_label(self,label)"/>
  <method name="def _get_selected(self)"/>
  <method name="def _set_selected(self, selected)"/>
  <method name="def _get_text(self)"/>
  <method name="def _set_text(self, value)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self,value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLOptGroupElement.py">
 <class name='class HTMLOptGroupElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="OPTGROUP")'/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self, value)"/>
  <method name="def _get_label(self)"/>
  <method name="def _set_label(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLParagraphElement.py">
 <class name='class HTMLParagraphElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="P")'/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLParamElement.py">
 <class name='class HTMLParamElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="PARAM")'/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self, value)"/>
  <method name="def _get_valueType(self)"/>
  <method name="def _set_valueType(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLPreElement.py">
 <class name='class HTMLPreElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="PRE")'/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLSelectElement.py">
 <class name='class HTMLSelectElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='SELECT')"/>
  <method name="def _get_type(self)"/>
  <method name="def _get_selectedIndex(self)"/>
  <method name="def _set_selectedIndex(self,index)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self,value)"/>
  <method name="def _get_length(self)"/>
  <method name="def _get_options(self)"/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self,disabled)"/>
  <method name="def _get_multiple(self)"/>
  <method name="def _set_multiple(self,mult)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self,name)"/>
  <method name="def _get_size(self)"/>
  <method name="def _set_size(self,size)"/>
  <method name="def _get_tabIndex(self)"/>
  <method name="def _set_tabIndex(self,tabindex)"/>
  <method name="def add(self,newElement,beforeElement)"/>
  <method name="def remove(self,index)"/>
  <method name="def _get_form(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLQuoteElement.py">
 <class name='class HTMLQuoteElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName)"/>
  <method name="def _get_cite(self)"/>
  <method name="def _set_cite(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLScriptElement.py">
 <class name='class HTMLScriptElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="SCRIPT")'/>
  <method name="def _get_charset(self)"/>
  <method name="def _set_charset(self, value)"/>
  <method name="def _get_defer(self)"/>
  <method name="def _set_defer(self, value)"/>
  <method name="def _get_event(self)"/>
  <method name="def _set_event(self, value)"/>
  <method name="def _get_htmlFor(self)"/>
  <method name="def _set_htmlFor(self, value)"/>
  <method name="def _get_src(self)"/>
  <method name="def _set_src(self, value)"/>
  <method name="def _get_text(self)"/>
  <method name="def _set_text(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTableCellElement.py">
 <class name='class HTMLTableCellElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='TD')"/>
  <method name="def _get_abbr(self)"/>
  <method name="def _set_abbr(self,abbr)"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, align)"/>
  <method name="def _get_axis(self)"/>
  <method name="def _set_axis(self, axis)"/>
  <method name="def _get_bgColor(self)"/>
  <method name="def _set_bgColor(self, color)"/>
  <method name="def _get_cellIndex(self)"/>
  <method name="def _get_ch(self)"/>
  <method name="def _set_ch(self,ch)"/>
  <method name="def _get_chOff(self)"/>
  <method name="def _set_chOff(self, offset)"/>
  <method name="def _get_colSpan(self)"/>
  <method name="def _set_colSpan(self, span)"/>
  <method name="def _get_headers(self)"/>
  <method name="def _set_headers(self,headers)"/>
  <method name="def _get_height(self)"/>
  <method name="def _set_height(self,height)"/>
  <method name="def _get_noWrap(self)"/>
  <method name="def _set_noWrap(self,nowrap)"/>
  <method name="def _get_rowSpan(self)"/>
  <method name="def _set_rowSpan(self, span)"/>
  <method name="def _get_scope(self)"/>
  <method name="def _set_scope(self, scope)"/>
  <method name="def _get_vAlign(self)"/>
  <method name="def _set_vAlign(self, valign)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, width)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLStyleElement.py">
 <class name='class HTMLStyleElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="STYLE")'/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self, value)"/>
  <method name="def _get_media(self)"/>
  <method name="def _set_media(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTableElement.py">
 <class name='class HTMLTableElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='TABLE')"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self,align)"/>
  <method name="def _get_bgColor(self)"/>
  <method name="def _set_bgColor(self,bgcolor)"/>
  <method name="def _get_border(self)"/>
  <method name="def _set_border(self,border)"/>
  <method name="def _get_caption(self)"/>
  <method name="def _set_caption(self,capt)"/>
  <method name="def _get_cellPadding(self)"/>
  <method name="def _set_cellPadding(self,cellpadding)"/>
  <method name="def _get_cellSpacing(self)"/>
  <method name="def _set_cellSpacing(self,cellspacing)"/>
  <method name="def _get_frame(self)"/>
  <method name="def _set_frame(self,frame)"/>
  <method name="def _get_rows(self)"/>
  <method name="def _get_rules(self)"/>
  <method name="def _set_rules(self,rules)"/>
  <method name="def _get_summary(self)"/>
  <method name="def _set_summary(self,summary)"/>
  <method name="def _get_tBodies(self)"/>
  <method name="def _get_tFoot(self)"/>
  <method name="def _set_tFoot(self, newFooter)"/>
  <method name="def _get_tHead(self)"/>
  <method name="def _set_tHead(self, newHead)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self,width)"/>
  <method name="def createCaption(self)"/>
  <method name="def createTHead(self)"/>
  <method name="def createTFoot(self)"/>
  <method name="def deleteCaption(self)"/>
  <method name="def deleteRow(self,index)"/>
  <method name="def deleteTHead(self)"/>
  <method name="def deleteTFoot(self)"/>
  <method name="def insertRow(self,index)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTableRowElement.py">
 <class name='class HTMLTableRowElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName='TR')"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self,align)"/>
  <method name="def _get_bgColor(self)"/>
  <method name="def _set_bgColor(self, color)"/>
  <method name="def _get_cells(self)"/>
  <method name="def _get_ch(self)"/>
  <method name="def _set_ch(self, ch)"/>
  <method name="def _get_chOff(self)"/>
  <method name="def _set_chOff(self, offset)"/>
  <method name="def _get_rowIndex(self)"/>
  <method name="def _get_sectionRowIndex(self)"/>
  <method name="def _get_vAlign(self)"/>
  <method name="def _set_vAlign(self, valign)"/>
  <method name="def insertCell(self, index)"/>
  <method name="def deleteCell(self,index)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTableSectionElement.py">
 <class name='class HTMLTableSectionElement(HTMLElement)'>
  <method name="def __init__(self, ownerDocument, nodeName)"/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self,align)"/>
  <method name="def _get_ch(self)"/>
  <method name="def _set_ch(self,char)"/>
  <method name="def _get_chOff(self)"/>
  <method name="def _set_chOff(self,offset)"/>
  <method name="def _get_rows(self)"/>
  <method name="def _get_vAlign(self)"/>
  <method name="def _set_vAlign(self,valign)"/>
  <method name="def deleteRow(self,index)"/>
  <method name="def insertRow(self,index)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTableCaptionElement.py">
 <class name='class HTMLTableCaptionElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="CAPTION")'/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTableColElement.py">
 <class name='class HTMLTableColElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="COL")'/>
  <method name="def _get_align(self)"/>
  <method name="def _set_align(self, value)"/>
  <method name="def _get_ch(self)"/>
  <method name="def _set_ch(self, value)"/>
  <method name="def _get_chOff(self)"/>
  <method name="def _set_chOff(self, value)"/>
  <method name="def _get_span(self)"/>
  <method name="def _set_span(self, value)"/>
  <method name="def _get_vAlign(self)"/>
  <method name="def _set_vAlign(self, value)"/>
  <method name="def _get_width(self)"/>
  <method name="def _set_width(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTextAreaElement.py">
 <class name='class HTMLTextAreaElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="TEXTAREA")'/>
  <method name="def _get_accessKey(self)"/>
  <method name="def _set_accessKey(self, value)"/>
  <method name="def _get_cols(self)"/>
  <method name="def _set_cols(self, value)"/>
  <method name="def _get_defaultValue(self)"/>
  <method name="def _set_defaultValue(self, value)"/>
  <method name="def _get_disabled(self)"/>
  <method name="def _set_disabled(self, value)"/>
  <method name="def _get_form(self)"/>
  <method name="def _get_name(self)"/>
  <method name="def _set_name(self, value)"/>
  <method name="def _get_readonly(self)"/>
  <method name="def _set_readonly(self, value)"/>
  <method name="def _get_rows(self)"/>
  <method name="def _set_rows(self, value)"/>
  <method name="def _get_tabIndex(self)"/>
  <method name="def _set_tabIndex(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _get_value(self)"/>
  <method name="def _set_value(self, value)"/>
  <method name="def blur(self)"/>
  <method name="def focus(self)"/>
  <method name="def select(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLTitleElement.py">
 <class name='class HTMLTitleElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="TITLE")'/>
  <method name="def _get_text(self)"/>
  <method name="def _set_text(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/HTMLUListElement.py">
 <class name='class HTMLUListElement(HTMLElement)'>
  <method name='def __init__(self, ownerDocument, nodeName="UL")'/>
  <method name="def _get_compact(self)"/>
  <method name="def _set_compact(self, value)"/>
  <method name="def _get_type(self)"/>
  <method name="def _set_type(self, value)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/dom/html/GenerateHtml.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/marshal/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/marshal/generic.py">
 <class name='class Marshaller(saxlib.HandlerBase)'>
  <method name="def dump(self, value, file)"/>
  <method name="def dumps(self, value)"/>
  <method name="def _marshal(self, value, dict)"/>
  <method name="def m_unimplemented(self, value, dict)"/>
  <method name="def m_root(self, value, dict)"/>
  <method name="def m_reference(self, value, dict)"/>
  <method name="def m_string(self, value, dict)"/>
  <method name="def m_str(self, value, dict)"/>
  <method name="def m_int(self, value, dict)"/>
  <method name="def m_float(self, value, dict)"/>
  <method name="def m_long(self, value, dict)"/>
  <method name="def m_tuple(self, value, dict)"/>
  <method name="def m_list(self, value, dict)"/>
  <method name="def m_dictionary(self, value, dict)"/>
  <method name="def m_dict(self, value, dict)"/>
  <method name="def m_None(self, value, dict)"/>
  <method name="def m_NoneType(self, value, dict)"/>
  <method name="def m_complex(self, value, dict)"/>
  <method name="def m_code(self, value, dict)"/>
  <method name="def m_instance(self, value, dict)"/>
 </class>
 <class name='class Unmarshaller(saxlib.HandlerBase)'>
  <method name="def __init__(self)"/>
  <method name="def _clear(self)"/>
  <method name="def load(self, file)"/>
  <method name="def loads(self, string)"/>
  <method name="def _load(self, file)"/>
  <method name="def find_class(self, module, name)"/>
  <method name="def startElement(self, name, attrs)"/>
  <method name="def characters(self, ch, start, length)"/>
  <method name="def endElement(self, name)"/>
  <method name="def um_start_root(self, name, attrs)"/>
  <method name="def um_start_reference(self, name, attrs)"/>
  <method name="def um_start_generic(self, name, attrs)"/>
  <method name="def um_end_string(self, name)"/>
  <method name="def um_end_int(self, name)"/>
  <method name="def um_end_long(self, name)"/>
  <method name="def um_end_float(self, name)"/>
  <method name="def um_end_none(self, name)"/>
  <method name="def um_end_complex(self, name)"/>
  <method name="def um_end_code(self, name)"/>
  <method name="def um_start_list(self, name, attrs)"/>
  <method name="def um_end_list(self, name)"/>
  <method name="def um_start_tuple(self, name, attrs)"/>
  <method name="def um_end_tuple(self, name)"/>
  <method name="def um_start_dictionary(self, name, attrs)"/>
  <method name="def um_end_dictionary(self, name)"/>
  <method name="def um_start_instance(self, name, attrs)"/>
  <method name="def um_end_instance(self, name)"/>
  <method name="def format(x)"/>
 </class>
 <class name='class _A'>
 </class>
 <class name='class _B'>
  <method name="def runtests()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/marshal/wddx.py">
 <class name='class TruthValue'>
  <method name="def __init__(self, value)"/>
  <method name="def __setattr__(self, item, value)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class RecordSet(UserDict.UserDict)'>
  <method name="def __init__(self, fields, *lists)"/>
 </class>
 <class name='class WDDXMarshaller(Marshaller)'>
  <method name="def __init__(self, strict=None)"/>
  <method name="def m_root(self, value, dict)"/>
  <method name="def m_instance(self, value, dict)"/>
  <method name="def m_recordset(self, value, dict)"/>
  <method name="def m_list(self, value, dict)"/>
  <method name="def m_tuple(self, value, dict)"/>
  <method name="def m_None(self, value, dict)"/>
  <method name="def m_dictionary(self, value, dict)"/>
 </class>
 <class name='class WDDXUnmarshaller(Unmarshaller)'>
  <method name="def um_start_char(self, name, attrs)"/>
  <method name="def um_start_boolean(self, name, attrs)"/>
  <method name="def um_end_boolean(self, name)"/>
  <method name="def um_start_var(self, name, attrs)"/>
  <method name="def um_start_recordset(self, name, attrs)"/>
  <method name="def um_end_recordset(self, name)"/>
  <method name="def um_start_field(self, name, attrs)"/>
  <method name="def dump(value, file, strict=None)"/>
  <method name="def dumps(value, strict=None)"/>
  <method name="def load(file)"/>
  <method name="def loads(string)"/>
  <method name="def runtests()"/>
 </class>
 <class name='class Custom'>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/expat.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/sgmllib.py">
 <class name='class SlowSGMLParser'>
  <method name="def __init__(self, verbose=0)"/>
  <method name="def reset(self)"/>
  <method name="def setnomoretags(self)"/>
  <method name="def setliteral(self, *args)"/>
  <method name="def feed(self, data)"/>
  <method name="def close(self)"/>
  <method name="def goahead(self, end)"/>
  <method name="def parse_comment(self, i)"/>
  <method name="def parse_starttag(self, i)"/>
  <method name="def parse_endtag(self, i)"/>
  <method name="def finish_shorttag(self, tag, data)"/>
  <method name="def finish_starttag(self, tag, attrs)"/>
  <method name="def finish_endtag(self, tag)"/>
  <method name="def handle_starttag(self, tag, method, attrs)"/>
  <method name="def handle_endtag(self, tag, method)"/>
  <method name="def report_unbalanced(self, tag)"/>
  <method name="def handle_charref(self, name)"/>
  <method name="def handle_entityref(self, name)"/>
  <method name="def handle_data(self, data)"/>
  <method name="def handle_comment(self, data)"/>
 </class>
 <class name='class FastSGMLParser'>
  <method name="def __init__(self, verbose=0)"/>
  <method name="def reset(self)"/>
  <method name="def setnomoretags(self)"/>
  <method name="def setliteral(self, *args)"/>
  <method name="def close(self)"/>
  <method name="def finish_shorttag(self, tag, data)"/>
  <method name="def finish_starttag(self, tag, attrs)"/>
  <method name="def finish_endtag(self, tag)"/>
  <method name="def handle_starttag(self, tag, method, attrs)"/>
  <method name="def handle_endtag(self, tag, method)"/>
  <method name="def report_unbalanced(self, tag)"/>
  <method name="def handle_entityref(self, name)"/>
  <method name="def handle_data(self, data)"/>
 </class>
 <class name='class TestSGMLParser(SGMLParser)'>
  <method name="def __init__(self, verbose=0)"/>
  <method name="def handle_data(self, data)"/>
  <method name="def flush(self)"/>
  <method name="def handle_comment(self, data)"/>
  <method name="def unknown_starttag(self, tag, attrs)"/>
  <method name="def unknown_endtag(self, tag)"/>
  <method name="def unknown_entityref(self, ref)"/>
  <method name="def unknown_charref(self, ref)"/>
  <method name="def close(self)"/>
  <method name="def test(args = None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/catalog.py">
 <class name='class CatParserFactory'>
  <method name="def __init__(self,error_lang=None)"/>
  <method name="def make_parser(self,sysid)"/>
 </class>
 <class name='class CatalogApp'>
  <method name="def handle_public(self,pubid,sysid)"/>
  <method name="def handle_delegate(self,prefix,sysid)"/>
  <method name="def handle_document(self,sysid)"/>
  <method name="def handle_system(self,sysid1,sysid2)"/>
  <method name="def handle_base(self,sysid)"/>
  <method name="def handle_catalog(self,sysid)"/>
  <method name="def handle_override(self,yesno)"/>
  <method name="def handle_doctype(self, docelem, sysid)"/>
  <method name="def handle_sgmldecl(self, sysid)"/>
 </class>
 <class name='class AbstrCatalogParser'>
  <method name="def __init__(self,error_lang=None)"/>
  <method name="def set_application(self,app)"/>
  <method name="def set_error_handler(self,err)"/>
 </class>
 <class name='class CatalogParser(AbstrCatalogParser,xmlutils.EntityParser)'>
  <method name="def __init__(self,error_lang=None)"/>
  <method name="def parseStart(self)"/>
  <method name="def do_parse(self)"/>
  <method name="def parse_arg(self)"/>
  <method name="def skip_stuff(self)"/>
  <method name="def parse_entry(self,name,args)"/>
 </class>
 <class name='class CatalogManager(CatalogApp)'>
  <method name="def __init__(self, error_handler = None)"/>
  <method name="def set_error_handler(self,err)"/>
  <method name="def set_parser_factory(self,parser_fact)"/>
  <method name="def parse_catalog(self,sysid)"/>
  <method name="def report(self,out=sys.stdout)"/>
  <method name="def handle_base(self,newbase)"/>
  <method name="def handle_catalog(self,sysid)"/>
  <method name="def handle_public(self,pubid,sysid)"/>
  <method name="def handle_system(self,sysid1,sysid2)"/>
  <method name="def handle_delegate(self,prefix,sysid)"/>
  <method name="def handle_document(self, sysid)"/>
  <method name="def handle_sgmldecl(self, sysid)"/>
  <method name="def handle_doctype(self, docelem, sysid)"/>
  <method name="def get_public_ids(self)"/>
  <method name="def get_document_sysid(self)"/>
  <method name="def get_sgmldecl(self)"/>
  <method name="def remap_sysid(self,sysid)"/>
  <method name="def resolve_sysid(self,pubid,sysid)"/>
  <method name="def get_doctype_sysid(self, docelem)"/>
  <method name="def __resolve_sysid(self,sysid)"/>
 </class>
 <class name='class xmlproc_catalog'>
  <method name="def __init__(self,sysid,pf,error_handler=None)"/>
  <method name="def get_document_sysid(self)"/>
  <method name="def get_sgmldecl(self)"/>
  <method name="def resolve_pe_pubid(self,pubid,sysid)"/>
  <method name="def resolve_doctype_pubid(self,pubid,sysid)"/>
  <method name="def resolve_entity_pubid(self,pubid,sysid)"/>
 </class>
 <class name='class SAX_catalog'>
  <method name="def __init__(self,sysid,pf)"/>
  <method name="def resolveEntity(self,pubid,sysid)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/charconv.py">
 <class name='class ConverterDatabase'>
  <method name="def __init__(self)"/>
  <method name="def add_alias(self,canonical,alias)"/>
  <method name="def can_convert(self,from_encoding,to_encoding)"/>
  <method name="def get_converter(self,from_encoding,to_encoding)"/>
  <method name="def add_converter(self,from_encoding,to_encoding,converter)"/>
  <method name="def _canonize_name(self,name)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/dtdparser.py">
 <class name='class DTDParser(XMLCommonParser)'>
  <method name="def find_reg(self,regexp,required=1)"/>
  <method name="def scan_to(self,target)"/>
  <method name="def get_index(self,target)"/>
  <method name="def test_str(self,str)"/>
  <method name="def now_at(self,test_str)"/>
  <method name="def _skip_ws(self,necessary=0)"/>
  <method name="def skip_ws(self,necessary=0)"/>
  <method name="def test_reg(self,regexp)"/>
  <method name="def get_match(self,regexp)"/>
  <method name="def __init__(self)"/>
  <method name="def reset(self)"/>
  <method name="def parseStart(self)"/>
  <method name="def parseEnd(self)"/>
  <method name="def set_dtd_consumer(self,dtd)"/>
  <method name="def set_dtd_object(self,dtd)"/>
  <method name="def set_internal(self,yesno)"/>
  <method name="def deref(self)"/>
  <method name="def do_parse(self)"/>
  <method name="def parse_entity(self)"/>
  <method name="def parse_ent_repltext(self)"/>
  <method name="def parse_ent_litval(self,litval)"/>
  <method name="def parse_notation(self)"/>
  <method name="def parse_pe_ref(self)"/>
  <method name="def parse_attlist(self)"/>
  <method name="def parse_elem_type(self)"/>
  <method name="def _parse_content_model(self,level=0)"/>
  <method name="def parse_mixed_content_model(self)"/>
  <method name="def parse_conditional(self)"/>
  <method name="def parse_ignored_data(self)"/>
  <method name="def __parse_list(self, elem_regexp, separator)"/>
  <method name="def is_external(self)"/>
  <method name='def _push_ent_stack(self,name="None")'/>
  <method name="def _pop_ent_stack(self)"/>
 </class>
 <class name='class DTDConsumerPE(DTDConsumer)'>
  <method name="def __init__(self)"/>
  <method name="def new_parameter_entity(self,name,val)"/>
  <method name="def new_external_pe(self,name,pubid,sysid)"/>
  <method name="def resolve_pe(self,name)"/>
  <method name="def reset(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/errors.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/namespace.py">
 <class name='class ParserFilter(xmlapp.Application)'>
  <method name="def __init__(self)"/>
  <method name="def set_application(self,app)"/>
  <method name="def set_locator(self,locator)"/>
  <method name="def doc_start(self)"/>
  <method name="def doc_end(self)"/>
  <method name="def handle_comment(self,data)"/>
  <method name="def handle_start_tag(self,name,attrs)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def handle_data(self,data,start,end)"/>
  <method name="def handle_ignorable_data(self,data,start,end)"/>
  <method name="def handle_pi(self,target,data)"/>
  <method name="def handle_doctype(self,root,pubID,sysID)"/>
  <method name="def set_entity_info(self,xmlver,enc,sddecl)"/>
 </class>
 <class name='class NamespaceFilter(ParserFilter)'>
  <method name="def __init__(self,parser)"/>
  <method name="def set_report_ns_attributes(self,action)"/>
  <method name="def handle_start_tag(self,name,attrs)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def __process_name(self,name,default_to=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/utils.py">
 <class name='class XMLParseException(Exception)'>
 </class>
 <class name='class ErrorPrinter(xmlapp.ErrorHandler)'>
  <method name="def __init__(self, level = 0, out = sys.stderr)"/>
  <method name="def warning(self,msg)"/>
  <method name="def error(self,msg)"/>
  <method name="def fatal(self,msg)"/>
  <method name="def __get_location(self)"/>
 </class>
 <class name='class ErrorRaiser(xmlapp.ErrorHandler)'>
  <method name="def __init__(self, locator = None, level = 0)"/>
  <method name="def warning(self, msg)"/>
  <method name="def error(self, msg)"/>
  <method name="def fatal(self, msg)"/>
 </class>
 <class name='class ErrorCounter(xmlapp.ErrorHandler)'>
  <method name="def __init__(self, locator = None)"/>
  <method name="def reset(self)"/>
  <method name="def warning(self,msg)"/>
  <method name="def error(self,msg)"/>
  <method name="def fatal(self,msg)"/>
 </class>
 <class name='class ESISDocHandler(xmlapp.Application)'>
  <method name="def __init__(self,writer=sys.stdout)"/>
  <method name="def handle_pi(self,target,data)"/>
  <method name="def handle_start_tag(self,name,amap)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def handle_data(self,data,start_ix,end_ix)"/>
 </class>
 <class name='class Canonizer(xmlapp.Application)'>
  <method name="def __init__(self,writer=sys.stdout)"/>
  <method name="def handle_pi(self,target, remainder)"/>
  <method name="def handle_start_tag(self,name,amap)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def handle_ignorable_data(self,data,start_ix,end_ix)"/>
  <method name="def handle_data(self,data,start_ix,end_ix)"/>
  <method name="def write_data(self,data)"/>
  <method name="def escape_content(str)"/>
  <method name="def escape_attval(str)"/>
 </class>
 <class name='class DocGenerator(xmlapp.Application)'>
  <method name="def __init__(self, out = sys.stdout)"/>
  <method name="def handle_pi(self, target, remainder)"/>
  <method name="def handle_start_tag(self,name,amap)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def handle_ignorable_data(self,data,start_ix,end_ix)"/>
  <method name="def handle_data(self,data,start_ix,end_ix)"/>
 </class>
 <class name='class DictResolver(xmlapp.PubIdResolver)'>
  <method name="def __init__(self, mapping = None)"/>
  <method name="def resolve_pe_pubid(self, pubid, sysid)"/>
  <method name="def resolve_doctype_pubid(self, pubid, sysid)"/>
  <method name="def resolve_entity_pubid(self, pubid, sysid)"/>
  <method name="def load_dtd(sysid)"/>
  <method name="def validate_doc(dtd,sysid)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/xcatalog.py">
 <class name='class XCatParserFactory'>
  <method name="def __init__(self,error_lang=None)"/>
  <method name="def make_parser(self,sysid)"/>
 </class>
 <class name='class FancyParserFactory'>
  <method name="def __init__(self,error_lang=None)"/>
  <method name="def make_parser(self,sysid)"/>
 </class>
 <class name='class XCatalogParser(catalog.AbstrCatalogParser,xmlapp.Application)'>
  <method name="def __init__(self,error_lang=None)"/>
  <method name="def parse_resource(self,sysid)"/>
  <method name="def handle_start_tag(self,name,attrs)"/>
  <method name="def get_current_sysid(self)"/>
  <method name="def get_line(self)"/>
  <method name="def get_column(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/xmlapp.py">
 <class name='class Application'>
  <method name="def __init__(self)"/>
  <method name="def set_locator(self,locator)"/>
  <method name="def doc_start(self)"/>
  <method name="def doc_end(self)"/>
  <method name="def handle_comment(self,data)"/>
  <method name="def handle_start_tag(self,name,attrs)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def handle_data(self,data,start,end)"/>
  <method name="def handle_ignorable_data(self,data,start,end)"/>
  <method name="def handle_pi(self,target,data)"/>
  <method name="def handle_doctype(self,root,pubID,sysID)"/>
  <method name="def set_entity_info(self,xmlver,enc,sddecl)"/>
 </class>
 <class name='class PubIdResolver'>
  <method name="def resolve_pe_pubid(self,pubid,sysid)"/>
  <method name="def resolve_doctype_pubid(self,pubid,sysid)"/>
  <method name="def resolve_entity_pubid(self,pubid,sysid)"/>
 </class>
 <class name='class ErrorHandler'>
  <method name="def __init__(self,locator)"/>
  <method name="def set_locator(self,loc)"/>
  <method name="def get_locator(self)"/>
  <method name="def warning(self,msg)"/>
  <method name="def error(self,msg)"/>
  <method name="def fatal(self,msg)"/>
 </class>
 <class name='class EntityHandler'>
  <method name="def __init__(self,parser)"/>
  <method name="def resolve_ent_ref(self,entname)"/>
 </class>
 <class name='class DTDConsumer'>
  <method name="def __init__(self,parser)"/>
  <method name="def dtd_start(self)"/>
  <method name="def dtd_end(self)"/>
  <method name="def new_general_entity(self,name,val)"/>
  <method name="def new_external_entity(self,ent_name,pub_id,sys_id,ndata)"/>
  <method name="def new_parameter_entity(self,name,val)"/>
  <method name="def new_external_pe(self,name,pubid,sysid)"/>
  <method name="def new_notation(self,name,pubid,sysid)"/>
  <method name="def new_element_type(self,elem_name,elem_cont)"/>
  <method name="def new_attribute(self,elem,attr,a_type,a_decl,a_def)"/>
  <method name="def handle_comment(self,contents)"/>
  <method name="def handle_pi(self,target,data)"/>
 </class>
 <class name='class InputSourceFactory'>
  <method name="def create_input_source(self,sysid)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/xmldtd.py">
 <class name='class WFCDTD(DTDConsumer)'>
  <method name="def __init__(self,parser)"/>
  <method name="def reset(self)"/>
  <method name="def set_dtd_listener(self,listener)"/>
  <method name="def resolve_pe(self,name)"/>
  <method name="def resolve_ge(self,name)"/>
  <method name="def get_general_entities(self)"/>
  <method name="def get_parameter_entities(self)"/>
  <method name="def get_elem(self,name)"/>
  <method name="def get_elements(self)"/>
  <method name="def get_notation(self,name)"/>
  <method name="def get_notations(self)"/>
  <method name="def get_root_elem(self,name)"/>
  <method name="def dtd_end(self)"/>
  <method name="def get_element_info(self,name)"/>
  <method name="def new_attribute(self,elem,attr,a_type,a_decl,a_def)"/>
  <method name="def dtd_start(self)"/>
  <method name="def handle_comment(self, contents)"/>
  <method name="def handle_pi(self, target, data)"/>
  <method name="def new_general_entity(self,name,val)"/>
  <method name="def new_parameter_entity(self,name,val)"/>
  <method name="def new_external_entity(self,ent_name,pubid,sysid,ndata)"/>
  <method name="def new_external_pe(self,name,pubid,sysid)"/>
  <method name="def new_comment(self,contents)"/>
  <method name="def new_pi(self,target,rem)"/>
  <method name="def new_notation(self,name,pubid,sysid)"/>
  <method name="def new_element_type(self,elem_name,elem_cont)"/>
 </class>
 <class name='class CompleteDTD(WFCDTD)'>
  <method name="def __init__(self,parser)"/>
  <method name="def reset(self)"/>
  <method name="def get_root_elem(self)"/>
  <method name="def get_notation(self,name)"/>
  <method name="def get_notations(self)"/>
  <method name="def dtd_end(self)"/>
  <method name="def new_notation(self,name,pubid,sysid)"/>
  <method name="def new_element_type(self,elem_name,elem_cont)"/>
  <method name="def new_attribute(self,elem,attr,a_type,a_decl,a_def)"/>
 </class>
 <class name='class ElementType'>
  <method name="def __init__(self,name,compiled,original)"/>
  <method name="def get_name(self)"/>
  <method name="def get_attr_list(self)"/>
  <method name="def get_attr(self,name)"/>
  <method name="def add_attr(self,attr,a_type,a_decl,a_def,parser)"/>
  <method name="def get_start_state(self)"/>
  <method name="def final_state(self,state)"/>
  <method name="def next_state(self,state,elem_name)"/>
  <method name="def get_valid_elements(self,state)"/>
  <method name="def get_content_model(self)"/>
  <method name="def get_default_attributes(self)"/>
  <method name="def get_fixed_attributes(self)"/>
 </class>
 <class name='class ElementTypeAny(ElementType)'>
  <method name="def __init__(self,name)"/>
  <method name="def get_start_state(self)"/>
  <method name="def final_state(self,state)"/>
  <method name="def next_state(self,state,elem_name)"/>
  <method name="def get_valid_elements(self, state)"/>
 </class>
 <class name='class Attribute'>
  <method name="def __init__(self,name,attrtype,decl,default,parser)"/>
  <method name="def validate(self,value,parser)"/>
  <method name="def get_name(self)"/>
  <method name="def get_type(self)"/>
  <method name="def get_decl(self)"/>
  <method name="def get_default(self)"/>
 </class>
 <class name='class InternalEntity'>
  <method name="def __init__(self,name,value)"/>
  <method name="def is_internal(self)"/>
  <method name="def get_value(self)"/>
 </class>
 <class name='class ExternalEntity'>
  <method name="def __init__(self,name,pubid,sysid,notation)"/>
  <method name="def is_parsed(self)"/>
  <method name="def is_internal(self)"/>
  <method name="def get_pubid(self)"/>
  <method name="def get_sysid(self)"/>
  <method name="def get_notation(self)"/>
 </class>
 <class name='class FNDABuilder'>
  <method name="def __init__(self)"/>
  <method name="def remember_state(self)"/>
  <method name="def set_current_to_remembered(self)"/>
  <method name="def forget_state(self)"/>
  <method name="def new_state(self)"/>
  <method name="def get_automaton(self)"/>
  <method name="def get_current_state(self)"/>
  <method name="def new_transition(self,label,frm,to)"/>
  <method name="def new_transition_to_new(self,label)"/>
  <method name="def new_transition_cur2rem(self,label)"/>
  <method name="def new_transition_rem2cur(self,label)"/>
  <method name="def new_transition_2cur(self,frm,label)"/>
 </class>
 <class name='class ContentModel'>
  <method name="def __init__(self,contents,modifier)"/>
  <method name="def add_states(self,builder)"/>
  <method name="def add_contents(self,builder,loop=0)"/>
 </class>
 <class name='class SeqContentModel(ContentModel)'>
  <method name="def add_contents(self,builder,loop=0)"/>
 </class>
 <class name='class ChoiceContentModel(ContentModel)'>
  <method name="def add_contents(self,builder,loop=0)"/>
  <method name="def hash(included)"/>
  <method name="def fnda2fda(transitions,final_state,parser)"/>
  <method name="def compute_closure(ix,included,transitions)"/>
  <method name="def print_trans(model)"/>
  <method name="def print_states(states,stop=0)"/>
  <method name="def make_empty_model()"/>
  <method name="def make_model(cmhash,content_model,err)"/>
  <method name="def make_objects(content_model)"/>
  <method name="def compile_content_model(cm)"/>
  <method name="def parse_content_model(cm)"/>
  <method name="def load_dtd(sysid)"/>
  <method name="def load_dtd_string(dtdstr)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/xmlproc.py">
 <class name='class XMLProcessor(XMLCommonParser)'>
  <method name="def __init__(self)"/>
  <method name="def set_application(self,app)"/>
  <method name="def set_dtd_listener(self,listener)"/>
  <method name="def set_data_after_wf_error(self,stop_on_wf=0)"/>
  <method name="def set_read_external_subset(self,read_it)"/>
  <method name="def report_error(self,number,args=None)"/>
  <method name="def reset(self)"/>
  <method name="def deref(self)"/>
  <method name="def do_parse(self)"/>
  <method name="def parseStart(self)"/>
  <method name="def parseEnd(self)"/>
  <method name="def parse_start_tag(self)"/>
  <method name="def parse_att_val(self)"/>
  <method name="def parse_literal_entval(self)"/>
  <method name="def parse_end_tag(self)"/>
  <method name="def parse_data(self)"/>
  <method name="def parse_charref(self)"/>
  <method name="def parse_cdata(self)"/>
  <method name="def parse_ent_ref(self)"/>
  <method name="def parse_doctype(self)"/>
  <method name="def parse_internal_dtd(self)"/>
  <method name="def handle_internal_dtd(self,doctype_line,doctype_lb,int_dtd)"/>
  <method name="def _setup_dtd_parser(self, internal_subset)"/>
  <method name="def get_elem_stack(self)"/>
  <method name="def get_data_buffer(self)"/>
  <method name="def get_construct_start(self)"/>
  <method name="def get_construct_end(self)"/>
  <method name="def get_raw_construct(self)"/>
  <method name="def get_current_ent_stack(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/xmlutils.py">
 <class name='class OutOfDataException(Exception)'>
 </class>
 <class name='class EntityParser'>
  <method name="def __init__(self)"/>
  <method name="def set_error_language(self,language)"/>
  <method name="def set_error_handler(self,err)"/>
  <method name="def set_pubid_resolver(self,pubres)"/>
  <method name="def set_entity_handler(self,ent)"/>
  <method name="def set_inputsource_factory(self,isf)"/>
  <method name="def set_data_charset(self,charset)"/>
  <method name="def parse_resource(self, sysID, bufsize = 16384)"/>
  <method name="def parse_string(self, doc, sysid = None, pubid = None)"/>
  <method name='def open_entity(self, sys_id, name = "None")'/>
  <method name='def push_entity(self,sysID,contents,name="None")'/>
  <method name="def pop_entity(self)"/>
  <method name="def read_from(self,fileobj,bufsize=16384)"/>
  <method name="def reset(self)"/>
  <method name="def autodetect_encoding(self, new_data)"/>
  <method name="def _handle_decoding_error(self, new_data, exc)"/>
  <method name="def feed(self, new_data, decoded = 0)"/>
  <method name="def close(self)"/>
  <method name="def parseStart(self)"/>
  <method name="def parseEnd(self)"/>
  <method name="def flush(self)"/>
  <method name="def set_start_point(self)"/>
  <method name="def store_state(self)"/>
  <method name="def restore_state(self)"/>
  <method name="def get_region(self)"/>
  <method name="def find_reg(self,regexp,required=1)"/>
  <method name="def scan_to(self,target)"/>
  <method name="def get_index(self,target)"/>
  <method name="def test_str(self,test_str)"/>
  <method name="def now_at(self,test_str)"/>
  <method name="def skip_ws(self,necessary=0)"/>
  <method name="def test_reg(self,regexp)"/>
  <method name="def get_match(self,regexp)"/>
  <method name="def update_pos(self)"/>
  <method name="def get_wrapped_match(self,wraps)"/>
  <method name="def report_error(self,number,args=None)"/>
  <method name="def get_current_sysid(self)"/>
  <method name="def set_sysid(self,sysID)"/>
  <method name="def get_offset(self)"/>
  <method name="def get_line(self)"/>
  <method name="def get_column(self)"/>
  <method name="def is_root_entity(self)"/>
  <method name="def is_external(self)"/>
  <method name='def _push_ent_stack(self,name="None")'/>
  <method name="def _pop_ent_stack(self)"/>
 </class>
 <class name='class XMLCommonParser(EntityParser)'>
  <method name="def parse_external_id(self,required=0,sysidreq=1)"/>
  <method name="def __get_quoted_string(self)"/>
  <method name="def parse_xml_decl(self,handler=None)"/>
  <method name="def parse_pi(self,handler,report_xml_decl=0)"/>
  <method name="def parse_comment(self,handler)"/>
  <method name="def _read_char_ref(self)"/>
  <method name="def _get_name(self)"/>
  <method name="def unhex(hex_value)"/>
  <method name="def matches(regexp,str)"/>
  <method name="def join_sysids_general(base, url)"/>
  <method name="def join_sysids_win32(base, url)"/>
  <method name="def ws_trans(data,_ws_dict=_ws_dict)"/>
  <method name="def ws_trans(data,_ws_trans=_ws_trans,translate=string.translate)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/xmlval.py">
 <class name='class XMLValidator'>
  <method name="def __init__(self)"/>
  <method name="def parse_resource(self,sysid)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
  <method name="def deref(self)"/>
  <method name="def set_application(self,app)"/>
  <method name="def set_error_language(self,language)"/>
  <method name="def set_error_handler(self,err)"/>
  <method name="def set_dtd_listener(self,dtd_listener)"/>
  <method name="def set_inputsource_factory(self,isf)"/>
  <method name="def set_pubid_resolver(self,pubres)"/>
  <method name="def set_data_after_wf_error(self,stop_on_wf=0)"/>
  <method name="def set_sysid(self, sysid)"/>
  <method name="def set_read_external_subset(self,read_it)"/>
  <method name="def get_dtd(self)"/>
  <method name="def get_current_sysid(self)"/>
  <method name="def get_offset(self)"/>
  <method name="def get_line(self)"/>
  <method name="def get_column(self)"/>
  <method name="def parseStart(self)"/>
  <method name="def parseEnd(self)"/>
  <method name="def read_from(self,file,bufsize=16384)"/>
  <method name="def flush(self)"/>
  <method name="def report_error(self,errno,args=None)"/>
  <method name="def get_elem_stack(self)"/>
  <method name="def get_data_buffer(self)"/>
  <method name="def get_construct_start(self)"/>
  <method name="def get_construct_end(self)"/>
  <method name="def get_raw_construct(self)"/>
  <method name="def get_current_ent_stack(self)"/>
 </class>
 <class name='class ValidatingApp(Application)'>
  <method name="def __init__(self,dtd,parser)"/>
  <method name="def reset(self)"/>
  <method name="def set_real_app(self,app)"/>
  <method name="def set_pubid_resolver(self,pubres)"/>
  <method name="def set_locator(self,locator)"/>
  <method name="def handle_start_tag(self,name,attrs)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def handle_data(self,data,start,end)"/>
  <method name="def validate_attributes(self,element,attrs)"/>
  <method name="def __validate_attr_entref(self,name)"/>
  <method name="def doc_end(self)"/>
  <method name="def handle_doctype(self,rootname,pub_id,sys_id)"/>
  <method name="def doc_start(self)"/>
  <method name="def handle_comment(self,data)"/>
  <method name="def handle_ignorable_data(self,data,start,end)"/>
  <method name="def handle_pi(self,target,data)"/>
  <method name="def set_entity_info(self,xmlver,enc,sddecl)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/parsers/xmlproc/_outputters.py">
 <class name='class MyErrorHandler(xmlapp.ErrorHandler)'>
  <method name="def __init__(self, locator, parser, warnings, entstack, rawxml)"/>
  <method name="def __show_location(self,prefix,msg)"/>
  <method name="def get_location(self)"/>
  <method name="def warning(self,msg)"/>
  <method name="def error(self,msg)"/>
  <method name="def fatal(self,msg)"/>
  <method name="def reset(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/_exceptions.py">
 <class name='class SAXException(Exception)'>
  <method name="def __init__(self, msg, exception=None)"/>
  <method name="def getMessage(self)"/>
  <method name="def getException(self)"/>
  <method name="def __str__(self)"/>
  <method name="def __getitem__(self, ix)"/>
 </class>
 <class name='class SAXParseException(SAXException)'>
  <method name="def __init__(self, msg, exception, locator)"/>
  <method name="def getColumnNumber(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getPublicId(self)"/>
  <method name="def getSystemId(self)"/>
  <method name="def __str__(self)"/>
 </class>
 <class name='class SAXNotRecognizedException(SAXException)'>
 </class>
 <class name='class SAXNotSupportedException(SAXException)'>
 </class>
 <class name='class SAXReaderNotAvailable(SAXNotSupportedException)'>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/expatreader.py">
 <class name='class ExpatParser(xmlreader.IncrementalParser, xmlreader.Locator)'>
  <method name="def __init__(self, namespaceHandling=0, bufsize=2**16-20)"/>
  <method name="def parse(self, source)"/>
  <method name="def prepareParser(self, source)"/>
  <method name="def setContentHandler(self, handler)"/>
  <method name="def getFeature(self, name)"/>
  <method name="def setFeature(self, name, state)"/>
  <method name="def getProperty(self, name)"/>
  <method name="def setProperty(self, name, value)"/>
  <method name="def feed(self, data, isFinal = 0)"/>
  <method name="def close(self)"/>
  <method name="def _reset_cont_handler(self)"/>
  <method name="def _reset_lex_handler_prop(self)"/>
  <method name="def reset(self)"/>
  <method name="def getColumnNumber(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getPublicId(self)"/>
  <method name="def getSystemId(self)"/>
  <method name="def start_element(self, name, attrs)"/>
  <method name="def end_element(self, name)"/>
  <method name="def start_element_ns(self, name, attrs)"/>
  <method name="def end_element_ns(self, name)"/>
  <method name="def processing_instruction(self, target, data)"/>
  <method name="def character_data(self, data)"/>
  <method name="def start_namespace_decl(self, prefix, uri)"/>
  <method name="def end_namespace_decl(self, prefix)"/>
  <method name="def unparsed_entity_decl(self, name, base, sysid, pubid, notation_name)"/>
  <method name="def notation_decl(self, name, base, sysid, pubid)"/>
  <method name="def external_entity_ref(self, context, base, sysid, pubid)"/>
  <method name="def create_parser(*args, **kwargs)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/handler.py">
 <class name='class ErrorHandler'>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
  <method name="def warning(self, exception)"/>
 </class>
 <class name='class ContentHandler'>
  <method name="def __init__(self)"/>
  <method name="def setDocumentLocator(self, locator)"/>
  <method name="def startDocument(self)"/>
  <method name="def endDocument(self)"/>
  <method name="def startPrefixMapping(self, prefix, uri)"/>
  <method name="def endPrefixMapping(self, prefix)"/>
  <method name="def startElement(self, name, attrs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def startElementNS(self, name, qname, attrs)"/>
  <method name="def endElementNS(self, name, qname)"/>
  <method name="def characters(self, content)"/>
  <method name="def ignorableWhitespace(self, whitespace)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def skippedEntity(self, name)"/>
 </class>
 <class name='class DTDHandler'>
  <method name="def notationDecl(self, name, publicId, systemId)"/>
  <method name="def unparsedEntityDecl(self, name, publicId, systemId, ndata)"/>
 </class>
 <class name='class EntityResolver'>
  <method name="def resolveEntity(self, publicId, systemId)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/sax2exts.py">
 <class name='class ValidatingReaderFactory(saxexts.ParserFactory)'>
  <method name="def make_parser(self, parser_list = [])"/>
  <method name="def make_parser(parser_list = [])"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/saxexts.py">
 <class name='class ParserFactory'>
  <method name="def __init__(self,list=[])"/>
  <method name="def get_parser_list(self)"/>
  <method name="def set_parser_list(self,list)"/>
  <method name="def _create_parser(self,parser_name)"/>
  <method name="def _create_parser(self,parser_name)"/>
  <method name="def make_parser(self, parser_list = [])"/>
  <method name="def _create_parser()"/>
 </class>
 <class name='class ExtendedParser(saxlib.Parser)'>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
 </class>
 <class name='class NosliceDocumentHandler(saxlib.DocumentHandler)'>
  <method name="def __init__(self)"/>
  <method name="def safe_handler(self,data,start,length)"/>
  <method name="def slice_handler(self,data,start,length)"/>
  <method name="def noslice_handler(self,data,start,length)"/>
  <method name="def handle_data(self,data)"/>
  <method name="def make_parser(parser_list = [])"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/saxlib.py">
 <class name='class XMLFilter(XMLReader)'>
  <method name="def __init__(self, parent = None)"/>
  <method name="def setParent(self, parent)"/>
  <method name="def getParent(self)"/>
 </class>
 <class name='class Attributes'>
  <method name="def getLength(self)"/>
  <method name="def getType(self, name)"/>
  <method name="def getValue(self, name)"/>
  <method name="def getValueByQName(self, name)"/>
  <method name="def getNameByQName(self, name)"/>
  <method name="def getNames(self)"/>
  <method name="def getQNames(self)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, name)"/>
  <method name="def keys(self)"/>
  <method name="def has_key(self, name)"/>
  <method name="def get(self, name, alternative=None)"/>
  <method name="def copy(self)"/>
  <method name="def items(self)"/>
  <method name="def values(self)"/>
 </class>
 <class name='class DeclHandler'>
  <method name="def attributeDecl(self, elem_name, attr_name, type, value_def, value)"/>
  <method name="def elementDecl(self, elem_name, content_model)"/>
  <method name="def internalEntityDecl(self, name, value)"/>
  <method name="def externalEntityDecl(self, name, public_id, system_id)"/>
 </class>
 <class name='class LexicalHandler'>
  <method name="def comment(self, content)"/>
  <method name="def startDTD(self, name, public_id, system_id)"/>
  <method name="def endDTD(self)"/>
  <method name="def startEntity(self, name)"/>
  <method name="def endEntity(self, name)"/>
  <method name="def startCDATA(self)"/>
  <method name="def endCDATA(self)"/>
 </class>
 <class name='class AttributeList'>
  <method name="def getLength(self)"/>
  <method name="def getName(self, i)"/>
  <method name="def getType(self, i)"/>
  <method name="def getValue(self, i)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, key)"/>
  <method name="def keys(self)"/>
  <method name="def has_key(self, key)"/>
  <method name="def get(self, key, alternative=None)"/>
  <method name="def copy(self)"/>
  <method name="def items(self)"/>
  <method name="def values(self)"/>
 </class>
 <class name='class DocumentHandler'>
  <method name="def characters(self, ch, start, length)"/>
  <method name="def endDocument(self)"/>
  <method name="def endElement(self, name)"/>
  <method name="def ignorableWhitespace(self, ch, start, length)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def setDocumentLocator(self, locator)"/>
  <method name="def startDocument(self)"/>
  <method name="def startElement(self, name, atts)"/>
 </class>
 <class name='class Parser'>
  <method name="def __init__(self)"/>
  <method name="def parse(self, systemId)"/>
  <method name="def parseFile(self, fileobj)"/>
  <method name="def setDocumentHandler(self, handler)"/>
  <method name="def setDTDHandler(self, handler)"/>
  <method name="def setEntityResolver(self, resolver)"/>
  <method name="def setErrorHandler(self, handler)"/>
  <method name="def setLocale(self, locale)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/saxutils.py">
 <class name='class Location'>
  <method name="def __init__(self, locator)"/>
  <method name="def getColumnNumber(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getPublicId(self)"/>
  <method name="def getSystemId(self)"/>
  <method name="def __str__(self)"/>
 </class>
 <class name='class ErrorPrinter'>
  <method name="def __init__(self, level=0, outfile=sys.stderr)"/>
  <method name="def warning(self, exception)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
  <method name="def __getpos(self, exception)"/>
 </class>
 <class name='class ErrorRaiser'>
  <method name="def __init__(self, level = 0)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
  <method name="def warning(self, exception)"/>
  <method name="def _outputwrapper(stream,encoding)"/>
  <method name="def _outputwrapper(stream,encoding)"/>
 </class>
 <class name='class XMLGenerator(handler.ContentHandler)'>
  <method name='def __init__(self, out=None, encoding="iso-8859-1")'/>
  <method name="def startDocument(self)"/>
  <method name="def startPrefixMapping(self, prefix, uri)"/>
  <method name="def endPrefixMapping(self, prefix)"/>
  <method name="def startElement(self, name, attrs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def startElementNS(self, name, qname, attrs)"/>
  <method name="def endElementNS(self, name, qname)"/>
  <method name="def characters(self, content)"/>
  <method name="def ignorableWhitespace(self, content)"/>
  <method name="def processingInstruction(self, target, data)"/>
 </class>
 <class name='class LexicalXMLGenerator(XMLGenerator, saxlib.LexicalHandler)'>
  <method name='def __init__(self, out=None, encoding="iso-8859-1")'/>
  <method name="def characters(self, content)"/>
  <method name="def startDTD(self, name, public_id, system_id)"/>
  <method name="def endDTD(self)"/>
  <method name="def comment(self, content)"/>
  <method name="def startCDATA(self)"/>
  <method name="def endCDATA(self)"/>
 </class>
 <class name='class ContentGenerator(XMLGenerator)'>
  <method name="def characters(self, str, start, end)"/>
 </class>
 <class name='class XMLFilterBase(xmlreader.XMLReader)'>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
  <method name="def warning(self, exception)"/>
  <method name="def setDocumentLocator(self, locator)"/>
  <method name="def startDocument(self)"/>
  <method name="def endDocument(self)"/>
  <method name="def startPrefixMapping(self, prefix, uri)"/>
  <method name="def endPrefixMapping(self, prefix)"/>
  <method name="def startElement(self, name, attrs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def startElementNS(self, name, qname, attrs)"/>
  <method name="def endElementNS(self, name, qname)"/>
  <method name="def characters(self, content)"/>
  <method name="def ignorableWhitespace(self, chars)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def skippedEntity(self, name)"/>
  <method name="def notationDecl(self, name, publicId, systemId)"/>
  <method name="def unparsedEntityDecl(self, name, publicId, systemId, ndata)"/>
  <method name="def resolveEntity(self, publicId, systemId)"/>
  <method name="def parse(self, source)"/>
  <method name="def setLocale(self, locale)"/>
  <method name="def getFeature(self, name)"/>
  <method name="def setFeature(self, name, state)"/>
  <method name="def getProperty(self, name)"/>
  <method name="def setProperty(self, name, value)"/>
 </class>
 <class name='class BaseIncrementalParser(xmlreader.IncrementalParser)'>
  <method name="def parse(self, source)"/>
  <method name="def prepareParser(self, source)"/>
  <method name='def prepare_input_source(source, base = "")'/>
 </class>
 <class name='class AttributeMap'>
  <method name="def __init__(self, map)"/>
  <method name="def getLength(self)"/>
  <method name="def getName(self, i)"/>
  <method name="def getType(self, i)"/>
  <method name="def getValue(self, i)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, key)"/>
  <method name="def items(self)"/>
  <method name="def keys(self)"/>
  <method name="def has_key(self,key)"/>
  <method name="def get(self, key, alternative=None)"/>
  <method name="def copy(self)"/>
  <method name="def values(self)"/>
 </class>
 <class name='class EventBroadcaster'>
 </class>
 <class name='class Event'>
  <method name="def __init__(self,list,name)"/>
  <method name="def __call__(self,*rest)"/>
  <method name="def __init__(self,list)"/>
  <method name="def __getattr__(self,name)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ESISDocHandler(saxlib.HandlerBase)'>
  <method name="def __init__(self,writer=sys.stdout)"/>
  <method name="def processingInstruction (self,target, remainder)"/>
  <method name="def startElement(self,name,amap)"/>
  <method name="def endElement(self,name)"/>
  <method name="def characters(self,data,start_ix,length)"/>
 </class>
 <class name='class Canonizer(saxlib.HandlerBase)'>
  <method name="def __init__(self,writer=sys.stdout)"/>
  <method name="def processingInstruction (self,target, remainder)"/>
  <method name="def startElement(self,name,amap)"/>
  <method name="def endElement(self,name)"/>
  <method name="def ignorableWhitespace(self,data,start_ix,length)"/>
  <method name="def characters(self,data,start_ix,length)"/>
  <method name="def write_data(self,data)"/>
 </class>
 <class name='class mllib'>
  <method name="def __init__(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
  <method name="def get_stack(self)"/>
  <method name="def handle_starttag(self,name,method,atts)"/>
  <method name="def handle_endtag(self,name,method)"/>
  <method name="def handle_data(self,data)"/>
  <method name="def handle_proc(self,target,data)"/>
  <method name="def unknown_starttag(self,name,atts)"/>
  <method name="def unknown_endtag(self,name)"/>
  <method name="def syntax_error(self,message)"/>
 </class>
 <class name='class Handler(saxlib.DocumentHandler,saxlib.ErrorHandler)'>
  <method name="def __init__(self,driver,handler)"/>
  <method name="def get_stack(self)"/>
  <method name="def reset(self)"/>
  <method name="def characters(self, ch, start, length)"/>
  <method name="def endElement(self, name)"/>
  <method name="def ignorableWhitespace(self, ch, start, length)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def startElement(self, name, atts)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/writer.py">
 <class name='class Syntax'>
  <method name="def __init__(self)"/>
 </class>
 <class name='class SGMLSyntax(Syntax)'>
 </class>
 <class name='class XMLSyntax(Syntax)'>
 </class>
 <class name='class XHTMLSyntax(XMLSyntax)'>
 </class>
 <class name='class DoctypeInfo'>
  <method name="def __init__(self)"/>
  <method name="def is_empty(self, gi)"/>
  <method name="def get_empties_list(self)"/>
  <method name="def has_element_content(self, gi)"/>
  <method name="def get_element_containers_list(self)"/>
  <method name="def get_attributes_list(self, gi)"/>
  <method name="def get_attribute_info(self, gi, attr)"/>
  <method name="def add_empty(self, gi)"/>
  <method name="def add_element_container(self, gi)"/>
  <method name="def add_attribute_defn(self, gi, attr, type, decl, default)"/>
  <method name="def load_pubtext(self, pubtext)"/>
 </class>
 <class name='class _XMLDTDLoader(xml.parsers.xmlproc.xmlapp.DTDConsumer)'>
  <method name="def __init__(self, info, parser)"/>
  <method name="def new_element_type(self, gi, model)"/>
 </class>
 <class name='class XMLDoctypeInfo(DoctypeInfo)'>
  <method name="def load_pubtext(self, sysid)"/>
 </class>
 <class name='class XHTMLDoctypeInfo(XMLDoctypeInfo)'>
 </class>
 <class name='class SGMLDoctypeInfo(DoctypeInfo)'>
  <method name="def load_pubtext(self, sysid)"/>
 </class>
 <class name='class XmlWriter'>
  <method name="def setDocumentLocator(self, locator)"/>
  <method name="def startDocument(self)"/>
  <method name="def endDocument(self)"/>
  <method name="def startElement(self, tag, attrs={})"/>
  <method name="def endElement(self, tag)"/>
  <method name="def characters(self, data, start, length)"/>
  <method name="def comment(self, data, start, length)"/>
  <method name="def ignorableWhitespace(self, data, start, length)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def handle_doctype(self, root)"/>
  <method name="def handle_cdata(self, data)"/>
  <method name="def __poptag(self, tag)"/>
  <method name="def __pushtag(self, tag)"/>
  <method name="def __check_flowing(self, tag, attrs)"/>
  <method name="def _check_pending_content(self)"/>
 </class>
 <class name='class PrettyPrinter(XmlWriter)'>
  <method name="def characters(self, data, start, length)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/xmlreader.py">
 <class name='class XMLReader'>
  <method name="def __init__(self)"/>
  <method name="def parse(self, source)"/>
  <method name="def getContentHandler(self)"/>
  <method name="def setContentHandler(self, handler)"/>
  <method name="def getDTDHandler(self)"/>
  <method name="def setDTDHandler(self, handler)"/>
  <method name="def getEntityResolver(self)"/>
  <method name="def setEntityResolver(self, resolver)"/>
  <method name="def getErrorHandler(self)"/>
  <method name="def setErrorHandler(self, handler)"/>
  <method name="def setLocale(self, locale)"/>
  <method name="def getFeature(self, name)"/>
  <method name="def setFeature(self, name, state)"/>
  <method name="def getProperty(self, name)"/>
  <method name="def setProperty(self, name, value)"/>
 </class>
 <class name='class IncrementalParser(XMLReader)'>
  <method name="def __init__(self, bufsize=2**16)"/>
  <method name="def parse(self, source)"/>
  <method name="def feed(self, data)"/>
  <method name="def prepareParser(self, source)"/>
  <method name="def close(self)"/>
  <method name="def reset(self)"/>
 </class>
 <class name='class Locator'>
  <method name="def getColumnNumber(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getPublicId(self)"/>
  <method name="def getSystemId(self)"/>
 </class>
 <class name='class InputSource'>
  <method name="def __init__(self, system_id = None)"/>
  <method name="def setPublicId(self, public_id)"/>
  <method name="def getPublicId(self)"/>
  <method name="def setSystemId(self, system_id)"/>
  <method name="def getSystemId(self)"/>
  <method name="def setEncoding(self, encoding)"/>
  <method name="def getEncoding(self)"/>
  <method name="def setByteStream(self, bytefile)"/>
  <method name="def getByteStream(self)"/>
  <method name="def setCharacterStream(self, charfile)"/>
  <method name="def getCharacterStream(self)"/>
 </class>
 <class name='class AttributesImpl'>
  <method name="def __init__(self, attrs)"/>
  <method name="def getLength(self)"/>
  <method name="def getType(self, name)"/>
  <method name="def getValue(self, name)"/>
  <method name="def getValueByQName(self, name)"/>
  <method name="def getNameByQName(self, name)"/>
  <method name="def getQNameByName(self, name)"/>
  <method name="def getNames(self)"/>
  <method name="def getQNames(self)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, name)"/>
  <method name="def keys(self)"/>
  <method name="def has_key(self, name)"/>
  <method name="def get(self, name, alternative=None)"/>
  <method name="def copy(self)"/>
  <method name="def items(self)"/>
  <method name="def values(self)"/>
 </class>
 <class name='class AttributesNSImpl(AttributesImpl)'>
  <method name="def __init__(self, attrs, qnames)"/>
  <method name="def getValueByQName(self, name)"/>
  <method name="def getNameByQName(self, name)"/>
  <method name="def getQNameByName(self, name)"/>
  <method name="def getQNames(self)"/>
  <method name="def copy(self)"/>
  <method name="def _test()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_htmllib.py">
 <class name='class SAX_HLParser(pylibs.SGMLParsers,htmllib.HTMLParser)'>
  <method name="def __init__(self)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def close(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_ltdriver.py">
 <class name='class SAX_XMLinter(saxlib.Parser)'>
  <method name="def __init__(self)"/>
  <method name="def parse(self,sysID)"/>
  <method name="def parseFile(self,file)"/>
  <method name="def setLocale(self, locale)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
  <method name="def _parse(self,file)"/>
  <method name="def name(pair)"/>
 </class>
 <class name='class AttributeItem'>
  <method name="def __init__(self,item)"/>
  <method name="def getLength(self)"/>
  <method name="def getName(self, i)"/>
  <method name="def getType(self, i)"/>
  <method name="def getValue(self, i)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, key)"/>
  <method name="def keys(self)"/>
  <method name="def has_key(self, key)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_ltdriver_val.py">
 <class name='class SAX_XMLinter_val(drv_ltdriver.SAX_XMLinter)'>
  <method name="def __init__(self)"/>
  <method name="def parse(self,sysID)"/>
  <method name="def parseFile(self,file)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_pyexpat.py">
 <class name='class SAX_expat(saxlib.Parser,saxlib.Locator)'>
  <method name="def __init__(self)"/>
  <method name="def startElement(self,name,attrs)"/>
  <method name="def endElement(self,name)"/>
  <method name="def characters(self,data)"/>
  <method name="def processingInstruction(self,target,data)"/>
  <method name="def parse(self,sysID)"/>
  <method name="def parseFile(self,fileobj,sysID=None)"/>
  <method name="def getSystemId(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getColumnNumber(self)"/>
  <method name="def __report_error(self)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self, data)"/>
  <method name="def close(self)"/>
 </class>
 <class name='class LazyExpatDriver(SAX_expat)'>
  <method name="def __init__(self)"/>
  <method name="def startElement(self,name,attrs)"/>
 </class>
 <class name='class LazyAttributeMap'>
  <method name="def __init__(self, list)"/>
  <method name="def getLength(self)"/>
  <method name="def getName(self, i)"/>
  <method name="def getType(self, i)"/>
  <method name="def getValue(self, i)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, key)"/>
  <method name="def items(self)"/>
  <method name="def keys(self)"/>
  <method name="def has_key(self,key)"/>
  <method name="def get(self, key, alternative)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_sgmllib.py">
 <class name='class SAX_SLParser(pylibs.SGMLParsers,sgmllib.SGMLParser)'>
  <method name="def __init__(self)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def close(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_sgmlop.py">
 <class name='class Parser(saxlib.Parser)'>
  <method name="def __init__(self)"/>
  <method name="def setDocumentHandler(self, dh)"/>
  <method name="def parse(self, url)"/>
  <method name="def parseFile(self, file)"/>
  <method name="def handle_cdata(self, data)"/>
  <method name="def handle_data(self, data)"/>
  <method name="def handle_proc(self, target, data)"/>
  <method name="def handle_charref(self, charno)"/>
  <method name="def finish_starttag(self, name, attrs)"/>
  <method name="def finish_endtag(self,name)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_xmldc.py">
 <class name='class SAX_xmldc(saxlib.Parser,saxlib.Locator)'>
  <method name="def __init__(self)"/>
  <method name="def parse(self, systemId)"/>
  <method name="def parseFile(self, fileobj)"/>
  <method name="def text(self, str)"/>
  <method name="def openStart(self, name)"/>
  <method name="def attribute(self, name, type, value)"/>
  <method name="def closeStart(self)"/>
  <method name="def closeEmpty(self)"/>
  <method name="def endTag(self, name=None)"/>
  <method name="def comment(self, stuff)"/>
  <method name="def pi(self, stuff)"/>
  <method name="def decl(self, name, parts)"/>
  <method name="def cref(self, numeral)"/>
  <method name="def eref(self, name)"/>
  <method name="def eof(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getSystemId(self)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_xmllib.py">
 <class name='class SAX_XLParser(pylibs.LibParser,xmllib.XMLParser)'>
  <method name="def __init__(self)"/>
  <method name="def _convert(self, str)"/>
  <method name="def unknown_starttag(self,tag,attributes)"/>
  <method name="def handle_endtag(self,tag,method)"/>
  <method name="def handle_proc(self,name,data)"/>
  <method name="def handle_xml(self, encoding, standalone)"/>
  <method name="def handle_data(self,data)"/>
  <method name="def handle_cdata(self,data)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getSystemId(self)"/>
  <method name="def _can_locate(self)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_xmlproc.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_xmlproc_val.py">
 <class name='class SAX_XPValParser(SAX_XPParser)'>
  <method name="def __init__(self)"/>
  <method name="def _create_parser(self)"/>
  <method name="def handle_start_tag(self, name, attrs)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
 </class>
 <class name='class XPAttributes(saxutils.AttributeMap)'>
  <method name="def __init__(self,map,elemdecl)"/>
  <method name="def getTypeStatic(self,i)"/>
  <method name="def getType(self, i)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/pylibs.py">
 <class name='class LibParser(saxlib.Parser,saxlib.Locator)'>
  <method name="def __init__(self)"/>
  <method name="def parse(self,sysID)"/>
  <method name="def parseFile(self,fileobj)"/>
  <method name="def unknown_endtag(self,tag)"/>
  <method name="def handle_xml(self,encoding,standalone)"/>
  <method name="def handle_data(self,data)"/>
  <method name="def handle_cdata(self,data)"/>
  <method name="def syntax_error(self, message)"/>
 </class>
 <class name='class SGMLParsers(LibParser)'>
  <method name="def handle_pi(self,data)"/>
  <method name="def handle_starttag(self,tag,method,attributes)"/>
  <method name="def unknown_starttag(self,tag,attributes)"/>
  <method name="def handle_endtag(self,tag,method)"/>
  <method name="def unknown_entityref(self,name)"/>
  <method name="def unknown_charref(self,no)"/>
  <method name="def handle_data(self,data)"/>
  <method name="def report_unbalanced(self,gi)"/>
  <method name="def _can_locate(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers/drv_xmltoolkit.py">
 <class name='class SAX_XTClient(saxlib.Parser,XMLClient.ClientBase)'>
  <method name="def __init__(self)"/>
  <method name="def text(self,obj)"/>
  <method name="def pi(self,obj)"/>
  <method name="def emptyTag(self,obj)"/>
  <method name="def nonEmptyTag(self,obj)"/>
  <method name="def endTag(self,obj)"/>
  <method name="def CDATA(self,obj)"/>
  <method name="def comment(self,obj)"/>
  <method name="def parse(self, sysID)"/>
  <method name="def parseFile(self, file)"/>
  <method name="def get_parser_name(self)"/>
  <method name="def get_parser_version(self)"/>
  <method name="def get_driver_version(self)"/>
  <method name="def is_validating(self)"/>
  <method name="def is_dtd_reading(self)"/>
  <method name="def reset(self)"/>
  <method name="def feed(self,data)"/>
  <method name="def close(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/drv_pyexpat.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/drv_xmlproc.py">
 <class name='class XmlprocDriver(IncrementalParser)'>
  <method name="def __init__(self)"/>
  <method name="def prepareParser(self, source)"/>
  <method name="def feed(self, data)"/>
  <method name="def close(self)"/>
  <method name="def reset(self)"/>
  <method name="def setLocale(self, locale)"/>
  <method name="def getFeature(self, name)"/>
  <method name="def setFeature(self, name, state)"/>
  <method name="def getProperty(self, name)"/>
  <method name="def setProperty(self, name, value)"/>
  <method name="def getColumnNumber(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getPublicId(self)"/>
  <method name="def getSystemId(self)"/>
  <method name="def set_locator(self, locator)"/>
  <method name="def doc_start(self)"/>
  <method name="def doc_end(self)"/>
  <method name="def handle_comment(self, data)"/>
  <method name="def handle_start_tag(self, name, attrs)"/>
  <method name="def handle_end_tag(self,name)"/>
  <method name="def handle_data(self, data, start, end)"/>
  <method name="def handle_ignorable_data(self, data, start, end)"/>
  <method name="def handle_pi(self, target, data)"/>
  <method name="def handle_doctype(self, root, pubId, sysId)"/>
  <method name="def set_entity_info(self, xmlver, enc, sddecl)"/>
  <method name="def get_locator(self)"/>
  <method name="def warning(self, msg)"/>
  <method name="def error(self, msg)"/>
  <method name="def fatal(self, msg)"/>
  <method name="def dtd_start(self)"/>
  <method name="def dtd_end(self)"/>
  <method name="def handle_comment(self, contents)"/>
  <method name="def handle_pi(self, target, rem)"/>
  <method name="def new_general_entity(self, name, val)"/>
  <method name="def new_external_entity(self, ent_name, pub_id, sys_id, ndata)"/>
  <method name="def new_parameter_entity(self, name, val)"/>
  <method name="def new_external_pe(self, name, pubid, sysid)"/>
  <method name="def new_notation(self, name, pubid, sysid)"/>
  <method name="def new_element_type(self, elem_name, elem_cont)"/>
  <method name="def new_attribute(self, elem, attr, type, a_decl, a_def)"/>
 </class>
 <class name='class NamespaceFilter'>
  <method name="def __init__(self, parser, content, lexical, driver)"/>
  <method name="def set_locator(self, locator)"/>
  <method name="def doc_start(self)"/>
  <method name="def doc_end(self)"/>
  <method name="def handle_comment(self, data)"/>
  <method name="def handle_start_tag(self,name,attrs)"/>
  <method name="def handle_end_tag(self, rawname)"/>
  <method name="def handle_data(self, data, start, end)"/>
  <method name="def handle_ignorable_data(self, data, start, end)"/>
  <method name="def handle_pi(self, target, data)"/>
  <method name="def handle_doctype(self, root, pubId, sysId)"/>
  <method name="def set_entity_info(self, xmlver, enc, sddecl)"/>
  <method name="def __process_name(self, name, default_to=None, is_attr=0)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/drv_htmllib.py">
 <class name='class HtmllibDriver(SgmllibDriver)'>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/drv_sgmllib.py">
 <class name='class SgmllibDriver(sgmllib.SGMLParser, IncrementalParser)'>
  <method name="def __init__(self)"/>
  <method name="def prepareParser(self, source)"/>
  <method name="def close(self)"/>
  <method name="def setLocale(self, locale)"/>
  <method name="def getFeature(self, name)"/>
  <method name="def setFeature(self, name, state)"/>
  <method name="def getProperty(self, name)"/>
  <method name="def setProperty(self, name, value)"/>
  <method name="def getColumnNumber(self)"/>
  <method name="def getLineNumber(self)"/>
  <method name="def getPublicId(self)"/>
  <method name="def getSystemId(self)"/>
  <method name="def unknown_starttag(self, name, attrs)"/>
  <method name="def unknown_endtag(self, name)"/>
  <method name="def handle_data(self, data)"/>
 </class>
 <class name='class AttributesImpl'>
  <method name="def __init__(self, attrs)"/>
  <method name="def getLength(self)"/>
  <method name="def getType(self, name)"/>
  <method name="def getValue(self, name)"/>
  <method name="def getValueByQName(self, name)"/>
  <method name="def getNameByQName(self, name)"/>
  <method name="def getQNameByName(self, name)"/>
  <method name="def getNames(self)"/>
  <method name="def getQNames(self)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, name)"/>
  <method name="def keys(self)"/>
  <method name="def has_key(self, name)"/>
  <method name="def get(self, name, alternative=None)"/>
  <method name="def copy(self)"/>
  <method name="def items(self)"/>
  <method name="def values(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/drv_sgmlop.py">
 <class name='class SaxParser(SGMLParser, XMLReader)'>
  <method name="def __init__(self, bufsize = 65536, encoding = 'UTF-8')"/>
  <method name="def parse(self, source)"/>
  <method name="def feed(self,buffer)"/>
  <method name="def prepareParser(self, source)"/>
  <method name="def close(self)"/>
  <method name="def _make_attr_dict(self,attr_list)"/>
  <method name="def unknown_starttag(self,tag,attrs)"/>
  <method name="def unknown_endtag(self,tag)"/>
  <method name="def handle_data(self,data)"/>
  <method name="def handle_comment(self,data)"/>
  <method name="def setProperty(self,name,value)"/>
  <method name="def getProperty(self, name)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/drv_sgmlop_html.py">
 <class name='class SaxHtmlParser(SaxParser)'>
  <method name="def __init__(self, bufsize = 65536, encoding = 'iso-8859-1', verbose = 0)"/>
  <method name="def finish_starttag(self, tag, attrs)"/>
  <method name="def finish_endtag(self, tag)"/>
  <method name="def handle_data(self,data)"/>
  <method name="def close(self)"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/sax/drivers2/drv_javasax.py">
 <class name='class JavaSAXParser(xmlreader.XMLReader, ContentHandler)'>
  <method name="def __init__(self)"/>
  <method name="def parse(self, source)"/>
  <method name="def getFeature(self, name)"/>
  <method name="def setFeature(self, name, state)"/>
  <method name="def getProperty(self, name)"/>
  <method name="def setProperty(self, name, value)"/>
  <method name="def setDocumentLocator(self, locator)"/>
  <method name="def startDocument(self)"/>
  <method name="def startElement(self, uri, lname, qname, attrs)"/>
  <method name="def characters(self, char, start, len)"/>
  <method name="def ignorableWhitespace(self, char, start, len)"/>
  <method name="def endElement(self, uri, lname, qname)"/>
  <method name="def endDocument(self)"/>
  <method name="def processingInstruction(self, target, data)"/>
 </class>
 <class name='class AttributesImpl'>
  <method name="def __init__(self, attrs = None)"/>
  <method name="def getLength(self)"/>
  <method name="def getType(self, name)"/>
  <method name="def getValue(self, name)"/>
  <method name="def getValueByQName(self, name)"/>
  <method name="def getNameByQName(self, name)"/>
  <method name="def getQNameByName(self, name)"/>
  <method name="def getNames(self)"/>
  <method name="def getQNames(self)"/>
  <method name="def __len__(self)"/>
  <method name="def __getitem__(self, name)"/>
  <method name="def keys(self)"/>
  <method name="def copy(self)"/>
  <method name="def items(self)"/>
  <method name="def values(self)"/>
  <method name="def get(self, name, alt = None)"/>
  <method name="def has_key(self, name)"/>
 </class>
 <class name='class AttributesNSImpl'>
  <method name="def __init__(self)"/>
  <method name="def create_java_parser()"/>
  <method name="def create_parser()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/unicode/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/unicode/iso8859.py">
 <class name='class _Wstringmod'>
  <method name="def __init__(self)"/>
  <method name="def install_alias(self, newname, oldname)"/>
  <method name="def from_utf8(self, utf8)"/>
  <method name="def decode(self, encoding, string)"/>
  <method name="def chr(self, ch)"/>
 </class>
 <class name='class UTF8String'>
  <method name="def __init__(self, string, encoding='utf-8')"/>
  <method name="def utf8(self)"/>
  <method name="def encode(self, encoding)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/unicode/utf8_iso.py">
 <class name='class ConvertError(ValueError)'>
  <method name="def utf8chr(c)"/>
  <method name="def code_to_utf8(encoding, c)"/>
  <method name="def utf8_to_code(encoding, str)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/utils/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/utils/iso8601.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/utils/characters.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/utils/qp_xml.py">
 <class name='class Parser'>
  <method name="def __init__(self)"/>
  <method name="def reset(self)"/>
  <method name="def find_prefix(self, prefix)"/>
  <method name="def process_prefix(self, name, use_default)"/>
  <method name="def start(self, name, attrs)"/>
  <method name="def end(self, name)"/>
  <method name="def cdata(self, data)"/>
  <method name="def parse(self, input)"/>
  <method name="def dump(f, root)"/>
  <method name="def textof(elem)"/>
 </class>
 <class name='class _element'>
  <method name="def __init__(self, **kw)"/>
  <method name="def textof(self)"/>
  <method name="def find(self, name, ns='')"/>
  <method name="def _clean_tree(elem)"/>
  <method name="def _collect_recurse(elem, dict)"/>
  <method name="def _collect_ns(elem)"/>
  <method name="def _dump_recurse(f, elem, namespaces, lang=None, dump_ns=0)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/BuiltInExtFunctions.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/Context.py">
 <class name='class Context'>
  <method name="def __repr__(self)"/>
  <method name="def nss(self)"/>
  <method name="def next(self)"/>
  <method name="def setNamespaces(self, processorNss)"/>
  <method name="def copyNamespaces(self)"/>
  <method name="def setVarBindings(self, varBindings)"/>
  <method name="def copyVarBindings(self)"/>
  <method name="def copyNodePosSize(self)"/>
  <method name="def setNodePosSize(self,(node,pos,size))"/>
  <method name="def copy(self)"/>
  <method name="def set(self,d)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/Conversions.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/CoreFunctions.py">
 <class name='class Types'>
  <method name="def Last(context)"/>
  <method name="def Position(context)"/>
  <method name="def Count(context, nodeSet)"/>
  <method name="def Id(context, object)"/>
  <method name="def LocalName(context, nodeSet=None)"/>
  <method name="def NamespaceUri(context, nodeSet=None)"/>
  <method name="def Name(context, nodeSet=None)"/>
  <method name="def String(context, object=None)"/>
  <method name="def Concat(context, *args)"/>
  <method name="def StartsWith(context, outer, inner)"/>
  <method name="def Contains(context, outer, inner)"/>
  <method name="def SubstringBefore(context, outer, inner)"/>
  <method name="def SubstringAfter(context, outer, inner)"/>
  <method name="def Substring(context, st, start, end=None)"/>
  <method name="def StringLength(context, st=None)"/>
  <method name="def Normalize(context, st=None)"/>
  <method name="def Translate(context, source, fromChars, toChars)"/>
  <method name="def _Boolean(context, object)"/>
  <method name="def Not(context, object)"/>
  <method name="def True(context)"/>
  <method name="def False(context)"/>
  <method name="def Lang(context, lang)"/>
  <method name="def Number(context, object=None)"/>
  <method name="def Sum(context, nodeSet)"/>
  <method name="def Floor(context, number)"/>
  <method name="def Ceiling(context, number)"/>
  <method name="def Round(context, number)"/>
  <method name="def ExpandedName(node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ExpandedNameWrapper.py">
 <class name='class ExpandedNameWrapper'>
  <method name="def __init__(self, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/NamespaceNode.py">
 <class name='class NamespaceNode'>
  <method name="def __init__(self, prefix, uri, ownerDoc=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedAbbreviatedAbsoluteLocationPath.py">
 <class name='class ParsedAbbreviatedAbsoluteLocationPath'>
  <method name="def __init__(self,rel)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedAbbreviatedRelativeLocationPath.py">
 <class name='class ParsedAbbreviatedRelativeLocationPath'>
  <method name="def __init__(self,left,right)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedAbsoluteLocationPath.py">
 <class name='class ParsedAbsoluteLocationPath'>
  <method name="def __init__(self, child)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedAxisSpecifier.py">
 <class name='class AxisSpecifier'>
  <method name="def __init__(self, axis)"/>
  <method name="def select(self, context, nodeTest)"/>
  <method name="def descendants(self, context, nodeTest, node, nodeSet)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedAncestorAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedAncestorOrSelfAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedAttributeAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedChildAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedDescendantOrSelfAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedDescendantAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedFollowingSiblingAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedFollowingAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self,context, nodeTest)"/>
 </class>
 <class name='class ParsedNamespaceAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedParentAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedPrecedingSiblingAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedPrecedingAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
 <class name='class ParsedSelfAxisSpecifier(AxisSpecifier)'>
  <method name="def select(self, context, nodeTest)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedExpr.py">
 <class name='class NodeSet(UserList.UserList)'>
  <method name="def __init__(self, data=None)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedLiteralExpr'>
  <method name="def __init__(self,literal)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedNLiteralExpr(ParsedLiteralExpr)'>
  <method name="def __init__(self,nliteral)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedVariableReferenceExpr'>
  <method name="def __init__(self,name)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def ParsedFunctionCallExpr(name, args)"/>
 </class>
 <class name='class FunctionCall'>
  <method name="def __init__(self, name, key, args)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def error(self, *args)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class FunctionCall1(FunctionCall)'>
  <method name="def __init__(self, name, key, args)"/>
  <method name="def evaluate(self, context)"/>
 </class>
 <class name='class FunctionCall2(FunctionCall)'>
  <method name="def __init__(self, name, key, args)"/>
  <method name="def evaluate(self, context)"/>
 </class>
 <class name='class FunctionCall3(FunctionCall)'>
  <method name="def __init__(self, name, key, args)"/>
  <method name="def evaluate(self, context)"/>
 </class>
 <class name='class FunctionCallN(FunctionCall)'>
  <method name="def __init__(self, name, key, args)"/>
  <method name="def evaluate(self, context)"/>
 </class>
 <class name='class ParsedUnionExpr'>
  <method name="def __init__(self,left,right)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedPathExpr'>
  <method name="def __init__(self, descendant, left, right)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedFilterExpr'>
  <method name="def __init__(self, filter, predicates)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def shiftContext(self,context,index,set,len,func)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedOrExpr'>
  <method name="def __init__(self, left, right)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedAndExpr'>
  <method name="def __init__(self,left,right)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedEqualityExpr'>
  <method name="def __init__(self, op, left, right)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedRelationalExpr'>
  <method name="def __init__(self, opcode, left, right)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedAdditiveExpr'>
  <method name="def __init__(self, sign, left, right)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedMultiplicativeExpr'>
  <method name="def __init__(self, opcode, left, right)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedUnaryExpr'>
  <method name="def __init__(self,exp)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedNodeTest.py">
 <class name='class NodeTestBase'>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def pprint(self, indent)"/>
  <method name="def __str__(self)"/>
 </class>
 <class name='class NodeTest(NodeTestBase)'>
  <method name="def __init__(self)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class CommentNodeTest(NodeTestBase)'>
  <method name="def __init__(self)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class TextNodeTest(NodeTestBase)'>
  <method name="def __init__(self)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ProcessingInstructionNodeTest(NodeTestBase)'>
  <method name="def __init__(self, target=None)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class PrincipalTypeTest(NodeTestBase)'>
  <method name="def __init__(self)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class NodeNameTest(NodeTestBase)'>
  <method name="def __init__(self, nodeName)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class LocalNameTest(NodeTestBase)'>
  <method name="def __init__(self, prefix)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class QualifiedNameTest(NodeTestBase)'>
  <method name="def __init__(self, prefix, localName)"/>
  <method name="def match(self, context, node, principalType=Node.ELEMENT_NODE)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedPredicateList.py">
 <class name='class ParsedPredicateList'>
  <method name="def __init__(self, preds)"/>
  <method name="def append(self,pred)"/>
  <method name="def filter(self, nodeList, context, reverse)"/>
  <method name="def __getitem__(self, index)"/>
  <method name="def __len__(self)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedRelativeLocationPath.py">
 <class name='class ParsedRelativeLocationPath'>
  <method name="def __init__(self, left, right)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/ParsedStep.py">
 <class name='class ParsedStep'>
  <method name="def __init__(self, axis, nodeTest, predicates=None)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedAbbreviatedStep'>
  <method name="def __init__(self, parent)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParsedNodeSetFunction'>
  <method name="def __init__(self, function, predicates=None)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/Set.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/Util.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/XPathGrammar.py">
 <class name='class XPathScanner(Scanner)'>
  <method name="def __init__(self, str)"/>
 </class>
 <class name='class XPath(Parser)'>
  <method name="def Start(self)"/>
  <method name="def FullExpr(self)"/>
  <method name="def LocationPath(self)"/>
  <method name="def AbsoluteLocationPath(self)"/>
  <method name="def OptRelativeLocationPath(self)"/>
  <method name="def RelativeLocationPath(self)"/>
  <method name="def RelativeLocationPaths(self, v)"/>
  <method name="def Step(self)"/>
  <method name="def Predicates(self)"/>
  <method name="def AxisSpecifier(self)"/>
  <method name="def NodeTest(self)"/>
  <method name="def OptLiteral(self)"/>
  <method name="def NameTest(self)"/>
  <method name="def Predicate(self)"/>
  <method name="def PredicateExpr(self)"/>
  <method name="def AbbreviatedAbsoluteLocationPath(self)"/>
  <method name="def AbbreviatedStep(self)"/>
  <method name="def AbbreviatedAxisSpecifier(self)"/>
  <method name="def Expr(self)"/>
  <method name="def PrimaryExpr(self)"/>
  <method name="def FunctionCall(self)"/>
  <method name="def Arguments(self)"/>
  <method name="def KommaArguments(self, v)"/>
  <method name="def Argument(self)"/>
  <method name="def UnionExpr(self)"/>
  <method name="def UnionExprs(self, v)"/>
  <method name="def PathExpr(self)"/>
  <method name="def PathExprRest(self, v)"/>
  <method name="def FilterExpr(self)"/>
  <method name="def FilterExprs(self, v)"/>
  <method name="def OrExpr(self)"/>
  <method name="def OrExprs(self, v)"/>
  <method name="def AndExpr(self)"/>
  <method name="def AndExprs(self, v)"/>
  <method name="def EqualityExpr(self)"/>
  <method name="def EqualityExprs(self, v)"/>
  <method name="def RelationalExpr(self)"/>
  <method name="def RelationalExprs(self, v)"/>
  <method name="def AdditiveExpr(self)"/>
  <method name="def AdditiveExprs(self, v)"/>
  <method name="def MultiplicativeExpr(self)"/>
  <method name="def MultiplicativeExprs(self, v)"/>
  <method name="def UnaryExpr(self)"/>
  <method name="def FullPattern(self)"/>
  <method name="def Pattern(self)"/>
  <method name="def LocationPathPattern(self)"/>
  <method name="def OptRelativePathPattern(self)"/>
  <method name="def IdTail(self)"/>
  <method name="def IdKeyPattern(self)"/>
  <method name="def RelativePathPattern(self)"/>
  <method name="def StepPattern(self)"/>
  <method name="def ChildOrAttributeAxisSpecifier(self)"/>
  <method name="def parse(rule, text)"/>
  <method name="def _get_type(match)"/>
  <method name="def _get_type(match)"/>
 </class>
 <class name='class XPathScanner'>
  <method name="def __init__(self,input)"/>
  <method name="def token(self, i, expected)"/>
 </class>
 <class name='class XPath(GeneratedXPath)'>
  <method name="def __init__(self, scanner, factory)"/>
  <method name="def __getattr__(self, name)"/>
  <method name="def mkNodeTest(self,op,val)"/>
  <method name="def mkQName(self,str)"/>
  <method name="def mkVariableReference(self, qname)"/>
  <method name="def mkFunctionCall(self, qname, args)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/XPathParser.py">
 <class name='class Parser'>
  <method name="def __init__(self, verbose=0)"/>
  <method name="def debug_mode(self, flag=None)"/>
  <method name="def parse(self, text)"/>
  <method name="def report_error(self, state, line, column, lval)"/>
  <method name="def announce(self, format, *args)"/>
  <method name="def error(self, format, *args)"/>
  <method name="def print_reduce(self, rule)"/>
  <method name="def print_state_stack(self, stack, size)"/>
  <method name="def absoluteLocationPath1(self, __stack, __ptr)"/>
  <method name="def absoluteLocationPath2(self, __stack, __ptr)"/>
  <method name="def relativeLocationPath2(self, __stack, __ptr)"/>
  <method name="def step1(self, __stack, __ptr)"/>
  <method name="def step2(self, __stack, __ptr)"/>
  <method name="def predicateList1(self, __stack, __ptr)"/>
  <method name="def predicateList2(self, __stack, __ptr)"/>
  <method name="def axisSpecifier1(self, __stack, __ptr)"/>
  <method name="def nodeTest1(self, __stack, __ptr)"/>
  <method name="def nodeTest2(self, __stack, __ptr)"/>
  <method name="def nodeTest3(self, __stack, __ptr)"/>
  <method name="def predicate1(self, __stack, __ptr)"/>
  <method name="def abbreviatedAbsoluteLocationPath1(self, __stack, __ptr)"/>
  <method name="def abbreviatedRelativeLocationPath1(self, __stack, __ptr)"/>
  <method name="def abbreviatedStep1(self, __stack, __ptr)"/>
  <method name="def abbreviatedStep2(self, __stack, __ptr)"/>
  <method name="def abbreviatedAxisSpecifier1(self, __stack, __ptr)"/>
  <method name="def abbreviatedAxisSpecifier2(self, __stack, __ptr)"/>
  <method name="def primaryExpr1(self, __stack, __ptr)"/>
  <method name="def primaryExpr2(self, __stack, __ptr)"/>
  <method name="def primaryExpr3(self, __stack, __ptr)"/>
  <method name="def primaryExpr4(self, __stack, __ptr)"/>
  <method name="def functionCall1(self, __stack, __ptr)"/>
  <method name="def functionCall2(self, __stack, __ptr)"/>
  <method name="def argumentList1(self, __stack, __ptr)"/>
  <method name="def argumentList2(self, __stack, __ptr)"/>
  <method name="def unionExpr2(self, __stack, __ptr)"/>
  <method name="def pathExpr3(self, __stack, __ptr)"/>
  <method name="def pathExpr4(self, __stack, __ptr)"/>
  <method name="def filterExpr2(self, __stack, __ptr)"/>
  <method name="def orExpr2(self, __stack, __ptr)"/>
  <method name="def andExpr2(self, __stack, __ptr)"/>
  <method name="def equalityExpr2(self, __stack, __ptr)"/>
  <method name="def relationalExpr2(self, __stack, __ptr)"/>
  <method name="def additiveExpr2(self, __stack, __ptr)"/>
  <method name="def additiveExpr3(self, __stack, __ptr)"/>
  <method name="def multiplicativeExpr2(self, __stack, __ptr)"/>
  <method name="def unaryExpr2(self, __stack, __ptr)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/XPathParserBase.py">
 <class name='class SyntaxException(Exception)'>
  <method name="def __init__(self, source, lineNum, location)"/>
 </class>
 <class name='class InternalException(Exception)'>
  <method name="def __init__(self, source, lineNum, location, exc, val, tb)"/>
 </class>
 <class name='class XPathParserBase'>
  <method name="def __init__(self)"/>
  <method name="def initialize(self)"/>
  <method name="def parse(self,st)"/>
  <method name="def pop(self)"/>
  <method name="def push(self,item)"/>
  <method name="def empty(self)"/>
  <method name="def size(self)"/>
  <method name="def raiseException(self, message)"/>
  <method name="def PrintSyntaxException(e)"/>
  <method name="def PrintInternalException(e)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/__init__.py">
 <class name='class CompiletimeException(FtException)'>
  <method name="def __init__(self, errorCode, *args)"/>
 </class>
 <class name='class RuntimeException(FtException)'>
  <method name="def __init__(self, errorCode, *args)"/>
  <method name="def Evaluate(expr, contextNode=None, context=None)"/>
  <method name="def Compile(expr)"/>
  <method name="def CreateContext(contextNode)"/>
  <method name="def RegisterExtensionModules(moduleNames)"/>
  <method name="def Init()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/pyxpath.py">
 <class name='class FtFactory'>
  <method name="def createStep(self, axis, test, predicates)"/>
  <method name="def createAbbreviatedStep(self,parent)"/>
  <method name="def createAxisSpecifier(self,axis)"/>
  <method name="def createNodeTest(self,type,val)"/>
  <method name="def createNameTest(self,prefix,local)"/>
  <method name="def createNumericExpr(self,operator,left,right)"/>
  <method name="def createBooleanExpr(self,operator,left,right)"/>
  <method name="def createPathExpr(self,left,right)"/>
  <method name="def createAbbreviatedPathExpr(self,left,right)"/>
  <method name="def createFilterExpr(self, filter, predicates)"/>
  <method name="def createVariableReference(self,prefix,localName)"/>
  <method name="def createFunctionCall(self,prefix,localName,args)"/>
  <method name="def createLocationPathPattern(self, idkey, isparent, step)"/>
  <method name="def createRelativePathPattern(self, rel, parent, step)"/>
  <method name="def createStepPattern(self, axis, test, predicates)"/>
 </class>
 <class name='class SyntaxError(yappsrt.SyntaxError)'>
  <method name="def __init__(self, pos, msg, str)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class Parser'>
  <method name="def parseLocationPath(self, str)"/>
  <method name="def parseExpr(self, str)"/>
  <method name="def parsePattern(self, str)"/>
  <method name="def Compile(str)"/>
  <method name="def CompilePattern(str)"/>
 </class>
 <class name='class Factory'>
  <method name="def __init__(self, cl)"/>
 </class>
 <class name='class ExprParser'>
  <method name="def parse(self, str)"/>
 </class>
 <class name='class PatternParser'>
  <method name="def parse(self, str)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/yappsrt.py">
 <class name='class SyntaxError(Exception)'>
  <method name='def __init__(self, pos=-1, msg="Bad Token")'/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class NoMoreTokens(Exception)'>
 </class>
 <class name='class Scanner'>
  <method name="def __init__(self, patterns, ignore, input)"/>
  <method name="def token(self, i, restrict=0)"/>
  <method name="def __repr__(self)"/>
  <method name="def scan(self, restrict)"/>
 </class>
 <class name='class Parser'>
  <method name="def __init__(self, scanner)"/>
  <method name="def _peek(self, *types)"/>
  <method name="def _scan(self, type)"/>
  <method name="def print_error(input, err, scanner)"/>
  <method name="def wrap_error_reporter(parser, rule)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xpath/MessageSource.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ApplyTemplatesElement.py">
 <class name='class ApplyTemplatesElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def _instantiateMode(self,context)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/AttributeElement.py">
 <class name='class AttributeElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/AttributeSetElement.py">
 <class name='class AttributeSetElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def use(self, context, processor, used=None)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/AttributeValueTemplate.py">
 <class name='class AttributeValueTemplate'>
  <method name="def __init__(self, source,reparse = 1)"/>
  <method name="def _parse(self)"/>
  <method name="def evaluate(self, context)"/>
  <method name="def __repr__(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/BuiltInExtElements.py">
 <class name='class FtApplyTemplates(ApplyTemplatesElement.ApplyTemplatesElement)'>
  <method name="def setup(self)"/>
  <method name="def _instantiateMode(self,context)"/>
 </class>
 <class name='class WriteFileElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=FT_EXT_NAMESPACE, localName='write-file', prefix='ft', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class FtOutputElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=FT_EXT_NAMESPACE, localName='output', prefix='ft', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
 <class name='class MessageOutputElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=FT_EXT_NAMESPACE, localName='message-output', prefix='ft', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/CallTemplateElement.py">
 <class name='class CallTemplateElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor, new_level=1)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
  <method name="def CheckTailRecursion(node, name)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ChooseElement.py">
 <class name='class ChooseElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor, new_level=1)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/CommentElement.py">
 <class name='class CommentElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/CopyElement.py">
 <class name='class CopyElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/CopyOfElement.py">
 <class name='class CopyOfElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __copyNode(self, processor, node)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ElementElement.py">
 <class name='class ElementElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ForEachElement.py">
 <class name='class ForEachElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/HtmlWriter.py">
 <class name='class HtmlWriter(NullWriter.NullWriter)'>
  <method name="def __init__(self, outputParams, stream=None, restrictElements=None)"/>
  <method name="def _tryNewLine(self)"/>
  <method name="def _doctype(self, docElem)"/>
  <method name="def _closeElement(self)"/>
  <method name="def endDocument(self)"/>
  <method name="def text(self, text, escapeOutput=1)"/>
  <method name="def attribute(self, name, value, namespace=EMPTY_NAMESPACE)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def comment(self, body)"/>
  <method name="def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None)"/>
  <method name="def endElement(self, name)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/IfElement.py">
 <class name='class IfElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor, new_level=1)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/LiteralElement.py">
 <class name='class LiteralElement(XsltElement)'>
  <method name="def __init__(self, doc, uri, localName, prefix, baseUri)"/>
  <method name="def setup(self)"/>
  <method name="def fixupAliases(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/LiteralText.py">
 <class name='class LiteralText(_Base)'>
  <method name="def __init__(self, doc, data)"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/MessageElement.py">
 <class name='class MessageElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/MessageSource.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/NullWriter.py">
 <class name='class NullWriter'>
  <method name="def __init__(self, outputParams=None, stream=None)"/>
  <method name="def getMediaType(self)"/>
  <method name="def getResult(self)"/>
  <method name="def startDocument(self)"/>
  <method name="def endDocument(self)"/>
  <method name="def text(self, text, escapeOutput=1)"/>
  <method name="def attribute(self, name, value, namespace=EMPTY_NAMESPACE)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def comment(self, body)"/>
  <method name="def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None)"/>
  <method name="def endElement(self, name)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/NumberElement.py">
 <class name='class NumberElement(XsltElement)'>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor, nodeList=None, specList=None)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
  <method name="def Base26(n)"/>
  <method name="def Group(numstr, size, sep)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/OtherXslElement.py">
 <class name='class DecimalFormatElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='decimal-format', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class IncludeElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='include', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class FallbackElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='fallback', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class ImportElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='import', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class KeyElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='key', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class NamespaceAliasElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='namespace-alias', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class OutputElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='output', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class PreserveSpaceElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='preserve-space', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class StripSpaceElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='strip-space', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/OtherwiseElement.py">
 <class name='class OtherwiseElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='otherwise', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor, new_level=1)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/OutputHandler.py">
 <class name='class OutputHandler(NullWriter.NullWriter)'>
  <method name="def __init__(self, outputParams, stream, notifyFunc)"/>
  <method name="def _finalize(self, writerClass)"/>
  <method name="def getResult(self)"/>
  <method name="def startDocument(self)"/>
  <method name="def text(self, *args, **kw)"/>
  <method name="def processingInstruction(self, *args, **kw)"/>
  <method name="def comment(self, *args, **kw)"/>
  <method name="def startElement(self, *args, **kw)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ParamElement.py">
 <class name='class ParamElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='param', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ParsedLocationPathPattern.py">
 <class name='class RootPattern'>
  <method name="def __init__(self)"/>
  <method name="def getShortcut(self)"/>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class IdKeyPattern'>
  <method name="def __init__(self, idKey, nodeTest=None, axisType=None)"/>
  <method name="def getShortcut(self)"/>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class IdKeyParentPattern(IdKeyPattern)'>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class IdKeyAncestorPattern(IdKeyPattern)'>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ParsedPattern.py">
 <class name='class ParsedPattern(ParsedToken.ParsedToken)'>
  <method name="def __init__(self, pattern)"/>
  <method name="def append(self,pattern)"/>
  <method name="def match(self, context, node)"/>
  <method name="def getMatchShortcuts(self)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ParsedRelativePathPattern.py">
 <class name='class RelativePathPattern(ParsedToken.ParsedToken)'>
  <method name="def __init__(self, op, parent, step)"/>
  <method name="def getShortcut(self)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class RelativeParentPattern(RelativePathPattern)'>
  <method name="def __init__(self, parent, step)"/>
  <method name="def match(self, context, node)"/>
 </class>
 <class name='class RelativeAncestorPattern(RelativePathPattern)'>
  <method name="def __init__(self, parent, step)"/>
  <method name="def match(self, context, node)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ParsedStepPattern.py">
 <class name='class StepPattern'>
  <method name="def __init__(self, nodeTest, axisType, parent=None, parentAxis=None)"/>
  <method name="def getShortcut(self)"/>
  <method name="def match(self, context, node, nodeType)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __str__(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class ParentStepPattern(StepPattern)'>
  <method name="def getShortcut(self)"/>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class RootParentStepPattern(StepPattern)'>
  <method name="def getShortcut(self)"/>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class AncestorStepPattern(StepPattern)'>
  <method name="def getShortcut(self)"/>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class PredicateStepPattern'>
  <method name="def __init__(self, nodeTest, axisType, predicates)"/>
  <method name="def getShortcut(self)"/>
  <method name="def match(self, context, node, axisType)"/>
  <method name="def pprint(self, indent='')"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/PlainTextWriter.py">
 <class name='class PlainTextWriter(NullWriter.NullWriter)'>
  <method name="def __init__(self, outputParams, stream=None)"/>
  <method name="def getMediaType(self)"/>
  <method name="def startDocument(self)"/>
  <method name="def endDocument(self)"/>
  <method name="def text(self, text, escapeOutput=1)"/>
  <method name="def attribute(self, name, value, namespace=EMPTY_NAMESPACE)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def comment(self, body)"/>
  <method name="def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None)"/>
  <method name="def endElement(self, name)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ProcessingInstructionElement.py">
 <class name='class ProcessingInstructionElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='processing-instructions', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/Processor.py">
 <class name='class Processor'>
  <method name="def __init__(self, reader=None)"/>
  <method name="def _reset(self)"/>
  <method name="def _getWsStripElements(self)"/>
  <method name="def registerExtensionModules(self, moduleList)"/>
  <method name="def setStylesheetReader(self, readInst)"/>
  <method name="def setDocumentReader(self, readInst)"/>
  <method name="def appendStylesheetUri(self, styleSheetUri, baseUri='')"/>
  <method name="def appendStylesheetNode(self, styleSheetNode, baseUri='')"/>
  <method name="def appendStylesheetString(self, text, baseUri='')"/>
  <method name="def appendStylesheetStream(self, stream, baseUri='')"/>
  <method name="def appendInstantStylesheet(self, sty)"/>
  <method name="def checkStylesheetPis(self, node, baseUri)"/>
  <method name="def applyTemplates(self, context, mode, params=None)"/>
  <method name="def applyBuiltins(self, context, mode)"/>
  <method name="def applyImports(self, context, mode, params=None)"/>
  <method name="def xslMessage(self, msg)"/>
  <method name="def callTemplate(self, name, context, params, new_level=1)"/>
  <method name="def _writerChanged(self, newWriter)"/>
  <method name="def addHandler(self, outputParams, stream=None, start=1)"/>
  <method name="def removeHandler(self)"/>
  <method name="def pushResult(self, handler=None, ownerDoc=None)"/>
  <method name="def popResult(self)"/>
  <method name="def releaseRtf(self, rtfRoot)"/>
  <method name="def _stripElements(self,node)"/>
  <method name="def __stripNode(self,node,stripElements,stripState)"/>
  <method name="def reclaim(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/Roman.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/RtfWriter.py">
 <class name='class RtfWriter(NullWriter.NullWriter)'>
  <method name="def __init__(self, outputParams, ownerDoc)"/>
  <method name="def getResult(self)"/>
  <method name="def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None)"/>
  <method name="def endElement(self, name)"/>
  <method name="def text(self, text, escapeOutput=1)"/>
  <method name="def attribute(self, name, value, namespace=EMPTY_NAMESPACE)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def comment(self, data)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/SortElement.py">
 <class name='class SortElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='sort', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor, nodeList=None, specList=None)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
  <method name="def Cmp(a, b, order, dataType, caseOrder)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/Stylesheet.py">
 <class name='class PatternInfo'>
  <method name="def MatchTree(patterns, context)"/>
 </class>
 <class name='class StylesheetElement(XsltElement)'>
  <method name="def _updateKeys(self, doc, processor)"/>
  <method name="def setup(self)"/>
  <method name="def _setupNamespaceAliases(self)"/>
  <method name="def _setupChildNodes(self)"/>
  <method name="def _setupDecimalFormats(self)"/>
  <method name="def _setupWhitespaceRules(self)"/>
  <method name="def _setupOutput(self)"/>
  <method name="def _setupTemplates(self)"/>
  <method name="def _setupKeys(self)"/>
  <method name="def _setupTopLevelVarParams(self)"/>
  <method name="def newSource(self, doc, processor)"/>
  <method name="def reset(self)"/>
  <method name="def _fixupAliases(self)"/>
  <method name="def processImports(self, contextNode, processor, topLevelParams)"/>
  <method name="def prime(self, contextNode, processor, topLevelParams)"/>
  <method name="def getNamedTemplates(self)"/>
  <method name="def getTopLevelVariables(self)"/>
  <method name="def applyTemplates(self, context, mode, processor, params=None)"/>
  <method name="def applyImports(self, context, mode, processor, params=None)"/>
  <method name="def callTemplate(self, processor, name, context, params, new_level=1)"/>
  <method name="def reclaim(self)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/StylesheetReader.py">
 <class name='class FtException(Exception)'>
  <method name="def CreateInstantStylesheet(sheet)"/>
  <method name="def FromInstant(dump, forceBaseUri=None)"/>
  <method name="def CreateInstantStylesheet(sheet)"/>
  <method name="def FromInstant(dump, forceBaseUri=None)"/>
  <method name="def FromDocument(oldDoc, baseUri='',stylesheetReader = None)"/>
  <method name="def DomConvert(node, xslParent, xslDoc, extUris, extElements, preserveSpace)"/>
 </class>
 <class name='class StylesheetReader(_ReaderBase)'>
  <method name="def __init__(self, force8Bit=0)"/>
  <method name="def fromUri(self, uri, baseUri='', ownerDoc=None, stripElements=None)"/>
  <method name="def initParser(self)"/>
  <method name="def initState(self, ownerDoc, refUri)"/>
  <method name="def _completeTextNode(self)"/>
  <method name="def _initializeSheet(self, rootNode)"/>
  <method name="def _handleExtUris(self, ns, local, value, extUri, delExtu, sheet)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def comment(self, data)"/>
  <method name="def startElement(self, name, attribs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def characters(self, data)"/>
  <method name="def CreateInstantStylesheet(sheet)"/>
  <method name="def FromInstant(dump, forceBaseUri=None)"/>
  <method name="def UnpickleDocument(pickledXml, forceBaseUri=None)"/>
  <method name="def UnpickleNode(pickledXml, doc=None, forceBaseUri=None)"/>
  <method name="def _UnpickleChildren(unpickler, node, forceBaseUri=None)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/TemplateElement.py">
 <class name='class TemplateElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='template', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def getMatchInfo(self)"/>
  <method name="def instantiate(self, context, processor, params=None, new_level=1)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
  <method name="def mergeUnbalancedPipes(self, patterns)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/TextElement.py">
 <class name='class TextElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='text', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/TextSax.py">
 <class name='class TextGenerator'>
  <method name="def __init__(self, keepAllWs=0)"/>
  <method name="def getRootNode(self)"/>
  <method name="def startElement(self, name, attribs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def ignorableWhitespace(self, ch, start, length)"/>
  <method name="def characters(self, ch, start, length)"/>
  <method name="def error(self, exception)"/>
  <method name="def fatalError(self, exception)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/TextWriter.py">
 <class name='class ElementData'>
  <method name="def __init__(self, name, cdataElement, attrs, extraNss=None)"/>
 </class>
 <class name='class TextWriter'>
  <method name="def __init__(self, outputParams)"/>
  <method name="def _prolog(self, docElem)"/>
  <method name="def getResult(self)"/>
  <method name="def text(self, text, escapeOutput=1)"/>
  <method name="def attribute(self, name, value, namespace=EMPTY_NAMESPACE)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def _writePiOrXmlDecl(self, target, data)"/>
  <method name="def comment(self, body)"/>
  <method name="def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None)"/>
  <method name="def endElement(self, name)"/>
  <method name="def _completeLastElement(self, elementIsEmpty)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/ValueOfElement.py">
 <class name='class ValueOfElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='value-of', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/VariableElement.py">
 <class name='class VariableElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='variable', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/WhenElement.py">
 <class name='class WhenElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='when', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor, new_level=1)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/WithParamElement.py">
 <class name='class WithParamElement(XsltElement)'>
  <method name="def __init__(self, doc, uri=xml.xslt.XSL_NAMESPACE, localName='with-param', prefix='xsl', baseUri='')"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/XPattern.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/XPatternParser.py">
 <class name='class XPatternParser'>
  <method name="def parsePattern(self,st)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/XPatternParserBase.py">
 <class name='class SyntaxException(Exception)'>
  <method name="def __init__(self, source, lineNum, location, prodNum)"/>
 </class>
 <class name='class InternalException(Exception)'>
  <method name="def __init__(self, source, lineNum, location, prodNum, exc, val, tb)"/>
 </class>
 <class name='class XPatternParserBase'>
  <method name="def __init__(self)"/>
  <method name="def initialize(self)"/>
  <method name="def parse(self,st)"/>
  <method name="def pop(self)"/>
  <method name="def push(self,item)"/>
  <method name="def empty(self)"/>
  <method name="def size(self)"/>
  <method name="def raiseException(self, message)"/>
  <method name="def PrintSyntaxException(e)"/>
  <method name="def PrintInternalException(e)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/XmlWriter.py">
 <class name='class ElementData'>
  <method name="def __init__(self, name, cdataElement, attrs, extraNss=None)"/>
 </class>
 <class name='class XmlWriter(NullWriter.NullWriter)'>
  <method name="def __init__(self, outputParams, stream=None)"/>
  <method name="def _doctype(self, docElem)"/>
  <method name="def startDocument(self)"/>
  <method name="def endDocument(self)"/>
  <method name="def text(self, text, escapeOutput=1)"/>
  <method name="def attribute(self, name, value, namespace=EMPTY_NAMESPACE)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def comment(self, body)"/>
  <method name="def startElement(self, name, namespace=EMPTY_NAMESPACE, extraNss=None)"/>
  <method name="def endElement(self, name)"/>
  <method name="def _completeLastElement(self, elementIsEmpty)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/XsltContext.py">
 <class name='class XsltContext(Context.Context)'>
  <method name="def copyNodePosSizeMode(self)"/>
  <method name="def setNodePosSizeMode(self, args)"/>
  <method name="def setStylesheet(self, args)"/>
  <method name="def copyStylesheet(self)"/>
  <method name="def release(self)"/>
  <method name="def set(self,d)"/>
  <method name="def clone(self)"/>
  <method name="def __repr__(self)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/XsltFunctions.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/_4xslt.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/__init__.py">
 <class name='class XsltException(Exception)'>
  <method name="def __init__(self, errorCode, *args)"/>
 </class>
 <class name='class XsltElement(_XsltElementBase)'>
  <method name="def __init__(self, doc, uri, localName, prefix, baseUri)"/>
  <method name="def setup(self)"/>
  <method name="def instantiate(self, context, processor)"/>
  <method name="def __getinitargs__(self)"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, state)"/>
 </class>
 <class name='class Error'>
 </class>
 <class name='class OutputParameters'>
  <method name="def __init__(self)"/>
  <method name="def Register()"/>
  <method name="def Init()"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/xslt/minisupport.py">
 <class name='class _XsltElementBase(minidom.Element)'>
  <method name="def __init__(self, ownerDocument, namespaceURI=EMPTY_NAMESPACE, localName='', prefix='')"/>
  <method name="def __getstate__(self)"/>
  <method name="def __setstate__(self, st)"/>
 </class>
 <class name='class _ReaderBase'>
  <method name="def __init__(self, force8Bit = 0)"/>
  <method name="def clone(self)"/>
  <method name="def initState(self, ownerDoc=None, stripElements=None)"/>
  <method name="def fromUri(self, uri, baseUri = '',  ownerDoc=None, stripElements=None)"/>
  <method name="def fromString(self, st, baseUri='', ownerDoc=None, stripElements=None)"/>
 </class>
 <class name='class StrippingPullDOM(pulldom.PullDOM)'>
  <method name="def __init__(self, stripElements)"/>
  <method name="def startElementNS(self, name, tagName , attrs)"/>
  <method name="def endElementNS(self, name, tagName)"/>
  <method name="def startElement(self, name, attrs)"/>
  <method name="def endElement(self, name)"/>
  <method name="def _completeTextNode(self)"/>
  <method name="def characters(self, data)"/>
  <method name="def ignorableWhitespace(self, data)"/>
  <method name="def processingInstruction(self, target, data)"/>
  <method name="def comment(self, data)"/>
 </class>
 <class name='class StrippingStream(pulldom.DOMEventStream)'>
  <method name="def __init__(self, stream, parser, bufsize, stripElements)"/>
 </class>
 <class name='class MinidomReader(_ReaderBase)'>
  <method name="def __init__(self, validate = 0)"/>
  <method name="def fromStream(self, stream, baseUri='',ownerDoc=None, stripElements=None)"/>
  <method name="def releaseNode(self, n)"/>
 </class>
</file>
<file name="/home/fdrake/projects/xml-python/xml/schema/__init__.py">
</file>
<file name="/home/fdrake/projects/xml-python/xml/schema/trex.py">
 <class name='class HandlerBase'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def set_handlers(self)"/>
  <method name="def start_ns_decl(self, prefix, uri)"/>
  <method name="def end_ns_decl(self, prefix)"/>
  <method name="def child(self, name, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def child(self, name, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def parse_TREX(location, baseURI=None)"/>
 </class>
 <class name='class TREXError'>
  <method name="def __init__(self, value)"/>
 </class>
 <class name='class T_HandlerBase(HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def child_pattern(self, name, atts)"/>
  <method name="def child_nameclass(self, name, atts)"/>
  <method name="def child_nameclass_pattern(self, name, atts)"/>
  <method name="def child_none(self, name, atts)"/>
  <method name="def child_non_trex(self, name, atts)"/>
 </class>
 <class name='class T_Ignore(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, name, atts)"/>
 </class>
 <class name='class T_RootHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent = None, atts = None)"/>
  <method name="def child(self, name, atts)"/>
  <method name="def add_pattern(self, pattern)"/>
  <method name="def in_trex_ns(name)"/>
  <method name="def in_default_ns(name)"/>
  <method name="def trex_ncname(name, using_trex_ns)"/>
  <method name="def handleNameClass(parser, handler, name, atts)"/>
  <method name="def handlePattern(parser, handler, name, atts)"/>
 </class>
 <class name='class T_ElementHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_nameclass(self, name_class)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_AttributeHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_nameclass(self, name_class)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_NameHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_AnyNameHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_NSNameHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_EmptyHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_NotAllowedHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_AnyStringHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_StringHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_DataHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_IncludeHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_ZeroOrMoreHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_MixedHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_OneOrMoreHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_OptionalHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_ChoiceHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_ConcurHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_NameClass_ChoiceHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_nameclass(self, nameclass)"/>
 </class>
 <class name='class T_NotHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_nameclass(self, nameclass)"/>
 </class>
 <class name='class T_DifferenceHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_nameclass(self, nameclass)"/>
 </class>
 <class name='class T_InterleaveHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_GroupHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_GrammarHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def child(self, name, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def set_start(self, pattern, combine=None)"/>
  <method name="def add_definition(self, name, pattern, combine=None)"/>
 </class>
 <class name='class T_IncludeGrammarHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_StartHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
 </class>
 <class name='class T_RefHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
 </class>
 <class name='class T_DefineHandler(T_HandlerBase)'>
  <method name="def __init__(self, parser, parent, atts)"/>
  <method name="def end(self, name)"/>
  <method name="def add_pattern(self, pattern)"/>
  <method name="def validate(trex, instance)"/>
 </class>
 <class name='class Pattern'>
 </class>
 <class name='class Match'>
  <method name="def __init__(self, remainder=None)"/>
  <method name="def add(self, match)"/>
  <method name="def isError(self)"/>
  <method name="def display(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def __cmp__(self, other)"/>
 </class>
 <class name='class Error(Match)'>
  <method name="def __init__(self, message, *children)"/>
  <method name="def isError(self)"/>
  <method name="def display(self)"/>
 </class>
 <class name='class Remainder'>
  <method name="def __init__(self, a, c)"/>
  <method name="def display(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def __cmp__(self, other)"/>
 </class>
 <class name='class Environment'>
  <method name="def __init__(self, e={}, parent=None)"/>
  <method name="def normalize(s)"/>
  <method name="def register_datatype(namespace_uri, ncname, test_function)"/>
  <method name="def allows(namespace_uri, ncname, s)"/>
  <method name="def is_integer(cdata)"/>
 </class>
 <class name='class T_Element(Pattern)'>
  <method name="def __init__(self, name_class=None, pattern=None)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_Attribute(Pattern)'>
  <method name="def __init__(self, name_class=None, pattern=None)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
 </class>
 <class name='class T_Empty(Pattern)'>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
 </class>
 <class name='class T_NotAllowed(Pattern)'>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
 </class>
 <class name='class T_AnyString(Pattern)'>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_String(Pattern)'>
  <method name="def __init__(self, chardata, whitespace_normalize)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
 </class>
 <class name='class T_Data(Pattern)'>
  <method name="def __init__(self, type_namespace, type_ncname)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
 </class>
 <class name='class T_Choice(Pattern)'>
  <method name="def __init__(self, pattern_1=None, pattern_2=None)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_Concur(Pattern)'>
  <method name="def __init__(self, pattern_1=None, pattern_2=None)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_Interleave(Pattern)'>
  <method name="def __init__(self, pattern_1=None, pattern_2=None)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_OneOrMore(Pattern)'>
  <method name="def __init__(self, pattern=None)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_Group(Pattern)'>
  <method name="def __init__(self, pattern_1=None, pattern_2=None)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_Grammar(Pattern)'>
  <method name="def __init__(self)"/>
  <method name="def display(self)"/>
  <method name="def add_definition(self, name, definition)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class T_Ref(Pattern)'>
  <method name="def __init__(self, name, parent)"/>
  <method name="def display(self)"/>
  <method name="def M(self, a, c, e)"/>
  <method name="def M_consume(self, a, c, e)"/>
  <method name="def M_interleave(self, a, c, e)"/>
 </class>
 <class name='class NameClass'>
 </class>
 <class name='class ExpandedName(NameClass)'>
  <method name="def __init__(self, namespaceURI=None, NCName=None)"/>
  <method name="def display(self)"/>
  <method name="def C(self, n)"/>
 </class>
 <class name='class AnyName(NameClass)'>
  <method name="def display(self)"/>
  <method name="def C(self, n)"/>
 </class>
 <class name='class NSName(NameClass)'>
  <method name="def __init__(self, namespaceURI)"/>
  <method name="def display(self)"/>
  <method name="def C(self, n)"/>
 </class>
 <class name='class NameClassChoice(NameClass)'>
  <method name="def __init__(self, nameclass_1, nameclass_2)"/>
  <method name="def display(self)"/>
  <method name="def C(self, n)"/>
 </class>
 <class name='class Difference(NameClass)'>
  <method name="def __init__(self, nameclass_1, nameclass_2)"/>
  <method name="def display(self)"/>
  <method name="def C(self, n)"/>
 </class>
 <class name='class I_Node'>
 </class>
 <class name='class I_Root(I_Node)'>
  <method name="def __init__(self)"/>
  <method name="def add_child(self, node)"/>
  <method name="def is_whitespace(self)"/>
  <method name="def is_element(self)"/>
  <method name="def display(self)"/>
 </class>
 <class name='class I_ExpandedName'>
  <method name="def __init__(self, namespaceURI, localName)"/>
 </class>
 <class name='class I_Element(I_Node)'>
  <method name="def __init__(self)"/>
  <method name="def add_child(self, node)"/>
  <method name="def add_attribute(self, node)"/>
  <method name="def is_whitespace(self)"/>
  <method name="def is_element(self)"/>
  <method name="def display(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class I_Attribute(I_Node)'>
  <method name="def __init__(self, expanded_name=None, value=None)"/>
  <method name="def is_whitespace(self)"/>
  <method name="def is_element(self)"/>
  <method name="def display(self)"/>
  <method name="def __repr__(self)"/>
 </class>
 <class name='class I_CharData(I_Node)'>
  <method name="def __init__(self, data)"/>
  <method name="def is_whitespace(self)"/>
  <method name="def is_element(self)"/>
  <method name="def display(self)"/>
  <method name="def __repr__(self)"/>
  <method name="def parse_Instance(location, baseURI=None)"/>
 </class>
 <class name='class I_RootHandler(HandlerBase)'>
  <method name="def __init__(self, parser, parent = None, atts = None)"/>
  <method name="def child(self, name, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
  <method name="def add_child(self, node)"/>
 </class>
 <class name='class I_ElementHandler(HandlerBase)'>
  <method name="def __init__(self, parser, parent, name, atts)"/>
  <method name="def child(self, name, atts)"/>
  <method name="def char(self, data)"/>
  <method name="def end(self, name)"/>
  <method name="def add_child(self, node)"/>
 </class>
</file>
</pyxml>